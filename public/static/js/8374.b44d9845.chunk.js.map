{"version":3,"file":"static/js/8374.b44d9845.chunk.js","mappings":"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","sources":["mockUp/Well.ts","sections/@dashboard/user/list/WellsTableRow.tsx","pages/wells/WellList.tsx","utils/formateDate.ts"],"sourcesContent":["export const wellDetailseHeader = [\r\n  { id: 'photo', label: 'Photo', align: 'left' },\r\n  { id: 'update by sevak', label: 'Update by sevak', align: 'left' },\r\n  { id: 'last update', label: 'Last update', align: 'left' },\r\n];\r\n\r\nexport const wellTableHeader = [\r\n  { id: 'village', label: 'Village name', align: 'left' },\r\n  { id: 'level', label: 'Level', align: 'left' },\r\n  { id: 'update by sevak', label: 'Update by sevak', align: 'left' },\r\n  { id: 'last update', label: 'Last update', align: 'left' },\r\n  { id: 'action', label: 'Action', align: 'left' },\r\n];\r\n","import { useState } from 'react';\r\n// @mui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { TableRow, TableCell, Typography, MenuItem } from '@mui/material';\r\n// components\r\nimport Iconify from '../../../../components/Iconify';\r\nimport { formatedDate } from 'src/utils/formateDate';\r\nimport { WellsItem } from 'src/@types/wells';\r\nimport { TableMoreMenu } from 'src/components/table';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ntype Props = {\r\n  row: WellsItem | null;\r\n  handleShowDetails?: (id: any) => void;\r\n  onhandleDeleteRow?: (id: any,) => void;\r\n};\r\n\r\nexport default function WellsTableRow({ row, handleShowDetails, onhandleDeleteRow }: Props) {\r\n  const theme = useTheme();\r\n  const [openMenu, setOpenMenuActions] = useState<HTMLElement | null>(null);\r\n  const handleOpenMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    setOpenMenuActions(event.currentTarget);\r\n  };\r\n  const handleCloseMenu = () => {\r\n    setOpenMenuActions(null);\r\n  };\r\n  const { village, level, stages, id } = row || {};\r\n\r\n  return (\r\n    <TableRow hover sx={{ cursor: 'default' }}>\r\n      <TableCell\r\n        onClick={() => handleShowDetails && handleShowDetails(id)}\r\n        sx={{ cursor: 'pointer' }}\r\n      >\r\n        <Typography variant=\"subtitle2\" noWrap sx={{ textTransform: 'capitalize' }}>\r\n          {village?.name}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap >\r\n          {level}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap sx={{ textTransform: 'capitalize' }}>\r\n          {stages?.[0]?.updatedbySevek?.name ? stages?.[0]?.updatedbySevek?.name : '--'}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {formatedDate(stages?.[0]?.created)}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell align=\"left\">\r\n        <TableMoreMenu\r\n          open={openMenu}\r\n          onOpen={handleOpenMenu}\r\n          onClose={handleCloseMenu}\r\n          actions={\r\n            <>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  onhandleDeleteRow && onhandleDeleteRow(id);\r\n                  handleCloseMenu();\r\n                }}\r\n                sx={{ color: 'error.main' }}\r\n              >\r\n                <Iconify icon={'eva:trash-2-outline'} />\r\n                Delete\r\n              </MenuItem>\r\n              {/* <MenuItem\r\n                onClick={() => {\r\n                  onhandleEditDetails && onhandleEditDetails(id);\r\n                  handleCloseMenu();\r\n                }}\r\n              >\r\n                <Iconify icon={'eva:edit-fill'} />\r\n                Edit\r\n              </MenuItem> */}\r\n            </>\r\n          }\r\n        />\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n// @mui\r\nimport {\r\n  Box,\r\n  Card,\r\n  Table,\r\n  TableBody,\r\n  Container,\r\n  TableContainer,\r\n  TablePagination,\r\n} from '@mui/material';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// hooks\r\nimport useTabs from '../../hooks/useTabs';\r\nimport useTable from '../../hooks/useTable';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport Scrollbar from '../../components/Scrollbar';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport { TableNoData, TableHeadCustom } from '../../components/table';\r\n// sections\r\nimport { UserTableToolbar } from '../../sections/@dashboard/user/list';\r\nimport { deleteWells, getWillsList } from 'src/redux/slices/wells';\r\nimport { useDispatch, useSelector } from 'src/redux/store';\r\nimport WellsTableRow from 'src/sections/@dashboard/user/list/WellsTableRow';\r\nimport { useSnackbar } from 'notistack';\r\nimport { wellTableHeader } from 'src/mockUp/Well';\r\nimport ConfirmationModal from 'src/components/modal/Confirmation';\r\nimport { DeleteConfirmationContent } from '../sevak/DeleteConfirmationContent';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function WellList() {\r\n  const { page, order, orderBy, rowsPerPage, setPage, onChangePage, onChangeRowsPerPage } =\r\n    useTable();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [state, setState] = useState({\r\n    name: '',\r\n    village: '',\r\n    openModal: false,\r\n    id: '',\r\n    // farmerName: '',\r\n  });\r\n\r\n  const { currentTab: filterStatus } = useTabs('all');\r\n\r\n  useEffect(() => {\r\n    getWillsList();\r\n  }, []);\r\n\r\n  const { wellsListData } = useSelector((state) => state.wells);\r\n\r\n  const onSearch = () => {\r\n    setPage(0);\r\n    getWillsList(state?.name, state?.village);\r\n  };\r\n\r\n  const handleFilterName = (filterName: string) => {\r\n    setState((prev) => ({ ...prev, name: filterName }));\r\n  };\r\n\r\n  const handleFilterRole = (filterVillage: string) => {\r\n    setState((prev) => ({ ...prev, village: filterVillage }));\r\n  };\r\n\r\n  const handleShowDetails = (id: string) => {\r\n    navigate(PATH_DASHBOARD.wells.details(id));\r\n  };\r\n\r\n  const isNotFound =\r\n    (!wellsListData?.length && !!state?.name) ||\r\n    (!wellsListData?.length && !!state?.village) ||\r\n    (!wellsListData?.length && !!filterStatus);\r\n\r\n  const onhandleDeleteRow = (id: string) => {\r\n    setState((prev) => ({ ...prev, openModal: true, id: id }));\r\n    // dispatch(deleteWells(id))\r\n    //   .then((res) => {\r\n    //     if (res?.data?.statusCode === 200) {\r\n    //       enqueueSnackbar(res?.data?.message, {\r\n    //         variant: 'success',\r\n    //       });\r\n    //       getWillsList();\r\n    //     } else {\r\n    //       getWillsList();\r\n    //     }\r\n    //   })\r\n    //   .catch(() => {\r\n    //     console.log('error');\r\n    //   });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setState((prev) => ({ ...prev, openModal: false, id: '' }));\r\n  };\r\n\r\n  const handleDeleteFarmer = () => {\r\n    dispatch(deleteWells(state?.id))\r\n      .then((res) => {\r\n        if (res?.data?.statusCode === 200) {\r\n          enqueueSnackbar(res?.data?.message, {\r\n            variant: 'success',\r\n          });\r\n          setState((prev) => ({ ...prev, openModal: false, id: '' }));\r\n          getWillsList();\r\n        } else {\r\n          setState((prev) => ({ ...prev, openModal: false, id: '' }));\r\n          getWillsList();\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('error');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Page title=\"Well: List\">\r\n      <Container maxWidth={'xl'}>\r\n        <HeaderBreadcrumbs\r\n          heading=\"Well List\"\r\n          links={[{ href: PATH_DASHBOARD.wells.list }]}\r\n          // action={\r\n          //   <Button\r\n          //     variant=\"contained\"\r\n          //     startIcon={<Iconify icon={'eva:plus-fill'} />}\r\n          //     onClick={handleAddWells}\r\n          //   >\r\n          //     New Wells\r\n          //   </Button>\r\n          // }\r\n        />\r\n\r\n        <Card>\r\n          <UserTableToolbar\r\n            filterName={state?.name}\r\n            filterVillage={state?.village}\r\n            onFilterVillage={handleFilterRole}\r\n            onFilterName={handleFilterName}\r\n            onSearch={onSearch}\r\n            placeholderText={'Search by sevak name'}\r\n            placeholderTextSecond={'Search by village name'}\r\n            pits={false}\r\n          />\r\n          <Scrollbar>\r\n            <TableContainer sx={{ minWidth: 800, position: 'relative' }}>\r\n              <Table size={'medium'}>\r\n                <TableHeadCustom\r\n                  order={order}\r\n                  orderBy={orderBy}\r\n                  headLabel={wellTableHeader}\r\n                  rowCount={wellsListData?.length}\r\n                />\r\n\r\n                <TableBody>\r\n                  {wellsListData?.length\r\n                    ? wellsListData\r\n                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                        .map((row: any) => (\r\n                          <WellsTableRow\r\n                            key={row.id}\r\n                            row={row}\r\n                            handleShowDetails={handleShowDetails}\r\n                            onhandleDeleteRow={onhandleDeleteRow}\r\n                          />\r\n                        ))\r\n                    : null}\r\n                  <TableNoData isNotFound={isNotFound} />\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Scrollbar>\r\n\r\n          <Box sx={{ position: 'relative' }}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25]}\r\n              component=\"div\"\r\n              count={wellsListData?.length ? wellsListData.length : 0}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={onChangePage}\r\n              onRowsPerPageChange={onChangeRowsPerPage}\r\n            />\r\n          </Box>\r\n        </Card>\r\n      </Container>\r\n\r\n      <ConfirmationModal\r\n        openModal={state.openModal}\r\n        // isLoading={isLoading}\r\n        handleClose={handleClose}\r\n        title={'Delete Confirmation!'}\r\n        handleSubmit={handleDeleteFarmer}\r\n      >\r\n        <DeleteConfirmationContent userName={'village'} />\r\n      </ConfirmationModal>\r\n    </Page>\r\n  );\r\n}\r\n","import moment from 'moment';\r\nexport function formatedDate(date?: Date | string | number) {\r\n  return moment(date).format('MM/DD/YYYY');\r\n}\r\n\r\nexport function formatedDateTime(date?: Date | string | number) {\r\n  return moment(date).format('MM/DD/YYYY hh:mm a');\r\n}\r\n"],"names":["wellDetailseHeader","id","label","align","wellTableHeader","WellsTableRow","row","handleShowDetails","onhandleDeleteRow","useTheme","useState","openMenu","setOpenMenuActions","handleCloseMenu","village","level","stages","TableRow","hover","sx","cursor","TableCell","onClick","Typography","variant","noWrap","textTransform","name","updatedbySevek","formatedDate","created","open","onOpen","event","currentTarget","onClose","actions","MenuItem","color","Iconify","icon","WellList","useTable","page","order","orderBy","rowsPerPage","setPage","onChangePage","onChangeRowsPerPage","navigate","useNavigate","enqueueSnackbar","useSnackbar","dispatch","useDispatch","openModal","state","setState","filterStatus","useTabs","currentTab","useEffect","getWillsList","useSelector","wells","wellsListData","PATH_DASHBOARD","isNotFound","length","prev","Page","title","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","Card","filterName","filterVillage","onFilterVillage","onFilterName","onSearch","placeholderText","placeholderTextSecond","pits","Scrollbar","TableContainer","minWidth","position","Table","size","headLabel","rowCount","TableBody","slice","map","Box","TablePagination","rowsPerPageOptions","component","count","onPageChange","onRowsPerPageChange","Confirmation","handleClose","handleSubmit","deleteWells","then","res","data","statusCode","message","catch","console","log","DeleteConfirmationContent","userName","date","moment","format","formatedDateTime"],"sourceRoot":""}