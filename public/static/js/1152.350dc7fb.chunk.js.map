{"version":3,"file":"static/js/1152.350dc7fb.chunk.js","mappings":"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","sources":["sections/@dashboard/user/list/CropTableRow.tsx","pages/masterData/form/CropAddEditForm.tsx","pages/masterData/crops/CropList.tsx","utils/formateDate.ts"],"sourcesContent":["import { useState } from 'react';\r\n// @mui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Avatar, Checkbox, TableRow, TableCell, Typography, MenuItem } from '@mui/material';\r\n// @types\r\n// components\r\nimport { CropItem } from 'src/@types/crops';\r\nimport _ from 'lodash';\r\nimport { formatedDate } from 'src/utils/formateDate';\r\nimport { TableMoreMenu } from 'src/components/table';\r\nimport Iconify from 'src/components/Iconify';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ntype Props = {\r\n  row: CropItem | null;\r\n  onDeleteRow?: (id: any,name:any) => void;\r\n  onEditRow?: (id: any) => void;\r\n  handleShowDetails?: (id: any) => void;\r\n};\r\n\r\nexport default function CropTableRow({ row, onDeleteRow, handleShowDetails, onEditRow }: Props) {\r\n  const theme = useTheme();\r\n\r\n  const [openMenu, setOpenMenuActions] = useState<HTMLElement | null>(null);\r\n  const handleOpenMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    setOpenMenuActions(event.currentTarget);\r\n  };\r\n  const handleCloseMenu = () => {\r\n    setOpenMenuActions(null);\r\n  };\r\n\r\n  const { name, status, modified, id } = row || {};\r\n\r\n  return (\r\n    <TableRow hover>\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {_.capitalize(name) || 'N/A'}\r\n        </Typography>\r\n      </TableCell>\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {_.capitalize(status) || 'N/A'}\r\n        </Typography>\r\n      </TableCell>\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {formatedDate(modified) || 'N/A'}\r\n        </Typography>\r\n      </TableCell>\r\n      <TableCell align=\"left\">\r\n        <TableMoreMenu\r\n          open={openMenu}\r\n          onOpen={handleOpenMenu}\r\n          onClose={handleCloseMenu}\r\n          actions={\r\n            <>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  onEditRow && onEditRow(id);\r\n                  handleCloseMenu();\r\n                }}\r\n              >\r\n                <Iconify icon={'eva:edit-fill'} />\r\n                Edit\r\n              </MenuItem>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  onDeleteRow && onDeleteRow(id,name);\r\n                  handleCloseMenu();\r\n                }}\r\n                sx={{ color: 'error.main' }}\r\n              >\r\n                <Iconify icon={'eva:trash-2-outline'} />\r\n                Delete\r\n              </MenuItem>\r\n            </>\r\n          }\r\n        />\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n","import { Box } from '@mui/system';\r\nimport React from 'react';\r\nimport { RHFSelectDropdown, RHFTextField } from 'src/components/hook-form';\r\ninterface CropAddEditFormProp {\r\n  statusList?: any;\r\n  methods?:any\r\n}\r\nconst CropAddEditForm = ({ statusList,methods }: CropAddEditFormProp) => {\r\n  const {watch}=methods\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'grid',\r\n        columnGap: 2,\r\n        rowGap: 3,\r\n        gridTemplateColumns: { xs: 'repeat(1, 1fr)', sm: 'repeat(1, 1fr)' },\r\n        p:2\r\n      }}\r\n    >\r\n      <RHFTextField name=\"name\" label=\"Crop Name\" />\r\n      <RHFSelectDropdown\r\n        name=\"status\"\r\n        label={'Status'}\r\n        value={watch('status')}\r\n        placeholder={'Status'}\r\n        options={statusList}\r\n      />\r\n      {/* <RHFTextField name=\"equipment\" label=\"Equipment Name\" /> */}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CropAddEditForm;\r\n","import * as Yup from 'yup';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\n// @mui\r\nimport {\r\n  Box,\r\n  Card,\r\n  Table,\r\n  Button,\r\n  TableBody,\r\n  Container,\r\n  TableContainer,\r\n  TablePagination,\r\n} from '@mui/material';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n// hooks\r\nimport useTabs from '../../../hooks/useTabs';\r\n\r\nimport useTable from '../../../hooks/useTable';\r\n// components\r\nimport Page from '../../../components/Page';\r\nimport Iconify from '../../../components/Iconify';\r\nimport Scrollbar from '../../../components/Scrollbar';\r\nimport HeaderBreadcrumbs from '../../../components/HeaderBreadcrumbs';\r\nimport { TableNoData, TableHeadCustom } from '../../../components/table';\r\n// sections\r\nimport { UserTableToolbar } from '../../../sections/@dashboard/user/list';\r\nimport { useDispatch, useSelector } from 'src/redux/store';\r\nimport {\r\n  addEditCrops,\r\n  deleteCrops,\r\n  emptyCropsDetails,\r\n  getCropsDetails,\r\n  getCropsList,\r\n} from 'src/redux/slices/crops';\r\nimport { CropItem } from 'src/@types/crops';\r\nimport CropTableRow from 'src/sections/@dashboard/user/list/CropTableRow';\r\nimport MasterDataForm from 'src/components/modal/MasterDataForm';\r\nimport CropAddEditForm from '../form/CropAddEditForm';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useSnackbar } from 'notistack';\r\nimport ConfirmationModal from 'src/components/modal/Confirmation';\r\nimport { DeleteConfirmationContent } from 'src/pages/sevak/DeleteConfirmationContent';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport const statusList = [\r\n  { id: 'active', label: 'Active', name: 'Active' },\r\n  { id: 'inactive', label: 'Inactive', name: 'Inactive' },\r\n];\r\n\r\nconst TABLE_HEAD = [\r\n  { id: 'crop', label: 'Crops', align: 'left' },\r\n  { id: 'status', label: 'Status', align: 'left' },\r\n  { id: 'lastdate', label: 'Last Update Date', align: 'left' },\r\n  { id: 'action', label: 'Action', align: 'left' },\r\n];\r\n\r\nexport default function CropList() {\r\n  const {\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    selected,\r\n    onSelectRow,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n    setPage,\r\n  } = useTable();\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [state, setState] = useState({\r\n    openModal: false,\r\n    filterName: '',\r\n    filterStatus: '',\r\n    id: '',\r\n    openDeleteModal: false,\r\n    cropsName: '',\r\n  });\r\n\r\n  const { currentTab: filterStatus } = useTabs('all');\r\n\r\n  useEffect(() => {\r\n    handleCropListing();\r\n  }, []);\r\n\r\n  const handleCropListing = () => {\r\n    getCropsList();\r\n  };\r\n\r\n  const { cropListData, cropsDetails, isLoading } = useSelector((state) => state.crops);\r\n\r\n  const onSearch = () => {\r\n    setPage(0);\r\n    getCropsList(state.filterName, state.filterStatus);\r\n  };\r\n\r\n  const handleFilterName = (filterName: string) => {\r\n    setState((prev) => ({ ...prev, filterName: filterName }));\r\n  };\r\n\r\n  const handleCropDetails = () => {\r\n    dispatch(getCropsDetails(state?.id));\r\n  };\r\n\r\n  const defaultValues = useMemo(\r\n    () => ({\r\n      name: '',\r\n      status: '',\r\n    }),\r\n    [cropsDetails]\r\n  );\r\n\r\n  const NewCropsSchema = Yup.object().shape({\r\n    name: Yup.string().required('Name is required').max(50, 'Limit of 50 characters'),\r\n    status: Yup.string().required('Status is required'),\r\n  });\r\n\r\n  const methods = useForm<CropItem>({\r\n    resolver: yupResolver(NewCropsSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const { watch, setValue } = methods;\r\n\r\n  useEffect(() => {\r\n    console.log('crops details --->', cropsDetails);\r\n\r\n    setValue('name', cropsDetails?.name);\r\n    console.log('status --->',cropsDetails?.status);\r\n    setValue('status', cropsDetails?.status);\r\n    \r\n  }, [cropsDetails]);\r\n\r\n  const isNotFound =\r\n    (!cropListData?.length && !!state.filterName) ||\r\n    (!cropListData?.length && !!state.filterStatus) ||\r\n    (!cropListData?.length && !!state.filterName) ||\r\n    (!cropListData?.length && !!filterStatus);\r\n\r\n  const handleAddCrop = () => {\r\n    dispatch(emptyCropsDetails(null));\r\n    setState((prev) => ({ ...prev, openModal: true, id: '' }));\r\n    // dispatch(emptyCropsDetails(null))\r\n    // navigate(PATH_DASHBOARD.masterdata.create);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setState((prev) => ({ ...prev, openModal: false, id: '' }));\r\n  };\r\n\r\n  const onChange = (value: any) => {\r\n    setState((prev) => ({ ...prev, filterStatus: value }));\r\n  };\r\n\r\n  const onDeleteRow = (id: string, name: string) => {\r\n    setState((prev) => ({ ...prev, openDeleteModal: true, id: id, cropsName: name }));\r\n  };\r\n\r\n  const onEditRow = (id: string) => {\r\n    dispatch(emptyCropsDetails(null));\r\n    setState((prev) => ({ ...prev, openModal: true, id: id }));\r\n    // dispatch(emptyCropsDetails(null));\r\n    // navigate(PATH_DASHBOARD.masterdata.edit(id));\r\n  };\r\n\r\n  const handleDeleteClose = () => {\r\n    setState((prev) => ({ ...prev, openDeleteModal: false, id: '', cropsName: '' }));\r\n  };\r\n\r\n  const handleDeleteCrops = () => {\r\n    dispatch(deleteCrops(state?.id))\r\n      .then((res) => {\r\n        if (res?.data?.statusCode === 200) {\r\n          enqueueSnackbar(res?.data?.message, {\r\n            variant: 'success',\r\n          });\r\n          handleCropListing();\r\n          setState((prev) => ({ ...prev, openDeleteModal: false, id: '', cropsName: '' }));\r\n        } else {\r\n          handleCropListing();\r\n          setState((prev) => ({ ...prev, openDeleteModal: false, id: '', cropsName: '' }));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log('error');\r\n      });\r\n  };\r\n\r\n  const onSubmit = async (data: CropItem) => {\r\n    console.log('submit');\r\n\r\n    try {\r\n      let previousState: any = {\r\n        name: cropsDetails?.name,\r\n        status: cropsDetails?.status,\r\n      };\r\n      let payload: any = {\r\n        name: data?.name,\r\n        status: data?.status,\r\n      };\r\n      Object.keys(payload).forEach((key) => {\r\n        if (payload[key] === previousState[key]) {\r\n          delete payload[key];\r\n        }\r\n      });\r\n\r\n      if (state?.id) {\r\n        dispatch(addEditCrops(payload, state.id)).then((res: any) => {\r\n          if (res?.data?.statusCode === 200) {\r\n            enqueueSnackbar(res?.data?.message, {\r\n              variant: 'success',\r\n            });\r\n            handleCropListing();\r\n            setState((prev) => ({ ...prev, openModal: false, id: '' }));\r\n          }\r\n        });\r\n      } else {\r\n        dispatch(addEditCrops(payload)).then((res: any) => {\r\n          if (res?.data?.statusCode === 201) {\r\n            enqueueSnackbar(res?.data?.message, {\r\n              variant: 'success',\r\n            });\r\n            handleCropListing();\r\n            setState((prev) => ({ ...prev, openModal: false, id: '' }));\r\n          } else {\r\n            enqueueSnackbar(res?.data?.message, {\r\n              variant: 'success',\r\n            });\r\n            setState((prev) => ({ ...prev, openModal: false, id: '' }));\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  return (\r\n    <Page title=\"Crops List\">\r\n      <Container maxWidth={'xl'}>\r\n        <HeaderBreadcrumbs\r\n          heading=\"Crops List\"\r\n          links={[{ href: PATH_DASHBOARD.masterdata.create }]}\r\n          action={\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<Iconify icon={'eva:plus-fill'} />}\r\n              onClick={handleAddCrop}\r\n            >\r\n              Add Crop\r\n            </Button>\r\n          }\r\n        />\r\n\r\n        <Card>\r\n          <UserTableToolbar\r\n            filterName={state.filterName}\r\n            filterVillage={state.filterStatus}\r\n            onFilterName={handleFilterName}\r\n            onSearch={onSearch}\r\n            placeholderText={'Search by crop name'}\r\n            placeholderTextSecond={'Search by status'}\r\n            challenges={true}\r\n            state={state}\r\n            onChange={onChange}\r\n          />\r\n\r\n          <Scrollbar>\r\n            <TableContainer sx={{ minWidth: 800, position: 'relative' }}>\r\n              <Table size={'medium'}>\r\n                <TableHeadCustom\r\n                  order={order}\r\n                  orderBy={orderBy}\r\n                  headLabel={TABLE_HEAD}\r\n                  rowCount={cropListData?.length}\r\n                  numSelected={selected.length}\r\n                />\r\n\r\n                <TableBody>\r\n                  {cropListData?.length\r\n                    ? cropListData\r\n                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                        .map((row: CropItem) => (\r\n                          <CropTableRow\r\n                            key={row.id}\r\n                            row={row}\r\n                            onDeleteRow={onDeleteRow}\r\n                            onEditRow={onEditRow}\r\n                          />\r\n                        ))\r\n                    : null}\r\n\r\n                  <TableNoData isNotFound={isNotFound} />\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Scrollbar>\r\n\r\n          <Box sx={{ position: 'relative' }}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25]}\r\n              component=\"div\"\r\n              count={cropListData?.length ? cropListData.length : 0}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={onChangePage}\r\n              onRowsPerPageChange={onChangeRowsPerPage}\r\n            />\r\n          </Box>\r\n        </Card>\r\n      </Container>\r\n\r\n      <MasterDataForm\r\n        openModal={state.openModal}\r\n        isLoading={isLoading}\r\n        handleClose={handleClose}\r\n        onSubmit={onSubmit}\r\n        methods={methods}\r\n        id={state.id}\r\n        handleCropDetails={handleCropDetails}\r\n        title={state.id ? 'Edit Crop Details' : 'Add New Crop'}\r\n        cropDetails={cropsDetails}\r\n        disabled={cropsDetails?.name === watch('name') && cropsDetails?.status === watch('status')}\r\n      >\r\n        <CropAddEditForm statusList={statusList} methods={methods} />\r\n      </MasterDataForm>\r\n\r\n      <ConfirmationModal\r\n        openModal={state.openDeleteModal}\r\n        // isLoading={isLoading}\r\n        handleClose={handleDeleteClose}\r\n        title={'Delete Confirmation!'}\r\n        handleSubmit={handleDeleteCrops}\r\n      >\r\n        <DeleteConfirmationContent userName={state?.cropsName} />\r\n      </ConfirmationModal>\r\n    </Page>\r\n  );\r\n}\r\n","import moment from 'moment';\r\nexport function formatedDate(date?: Date | string | number) {\r\n  return moment(date).format('MM/DD/YYYY');\r\n}\r\n\r\nexport function formatedDateTime(date?: Date | string | number) {\r\n  return moment(date).format('MM/DD/YYYY hh:mm a');\r\n}\r\n"],"names":["CropTableRow","row","onDeleteRow","onEditRow","handleShowDetails","useTheme","useState","openMenu","setOpenMenuActions","handleCloseMenu","name","status","modified","id","TableRow","hover","TableCell","Typography","variant","noWrap","_","formatedDate","align","open","onOpen","event","currentTarget","onClose","actions","MenuItem","onClick","Iconify","icon","sx","color","statusList","watch","methods","display","columnGap","rowGap","gridTemplateColumns","xs","sm","p","label","value","placeholder","options","TABLE_HEAD","CropList","useTable","page","order","orderBy","rowsPerPage","selected","onChangePage","onSelectRow","onChangeRowsPerPage","setPage","enqueueSnackbar","useSnackbar","dispatch","useDispatch","useNavigate","openModal","filterName","filterStatus","openDeleteModal","cropsName","state","setState","useTabs","currentTab","useEffect","handleCropListing","getCropsList","useSelector","crops","cropListData","cropsDetails","isLoading","defaultValues","useMemo","NewCropsSchema","Yup","shape","required","max","useForm","resolver","yupResolver","setValue","console","log","isNotFound","length","prev","emptyCropsDetails","onSubmit","data","previousState","payload","Object","keys","forEach","key","addEditCrops","then","res","statusCode","message","error","Page","title","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","PATH_DASHBOARD","action","Button","startIcon","Card","filterVillage","onFilterName","onSearch","placeholderText","placeholderTextSecond","challenges","onChange","Scrollbar","TableContainer","minWidth","position","Table","size","headLabel","rowCount","numSelected","TableBody","slice","map","Box","TablePagination","rowsPerPageOptions","component","count","onPageChange","onRowsPerPageChange","MasterDataForm","handleClose","handleCropDetails","getCropsDetails","cropDetails","disabled","Confirmation","handleSubmit","deleteCrops","catch","DeleteConfirmationContent","userName","date","moment","format","formatedDateTime"],"sourceRoot":""}