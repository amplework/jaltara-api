{"version":3,"file":"static/js/9962.c7ab6951.chunk.js","mappings":"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","sources":["components/common/cards/imageCard/index.tsx","components/common/detailsListing/listing/index.tsx","mockUp/Well.ts","pages/wells/WellsDetails.tsx","sections/@dashboard/user/list/WellsDetails.tsx","utils/formateDate.ts"],"sourcesContent":["import { Box, Grid } from '@mui/material';\r\nimport Image from 'src/components/Image';\r\nimport noImage from 'src/assets/images/noImage.jpg';\r\n\r\nconst ImageCard = ({ src }: { src: string | null }) => {\r\n  return (\r\n        <Box\r\n          sx={{\r\n            width: 300,\r\n            height: 300,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            borderRadius: 2,\r\n            overflow: 'hidden',\r\n            boxShadow: 3,\r\n            transition: 'box-shadow 0.3s ease-in-out',\r\n            '&:hover': {\r\n              boxShadow: 6,\r\n            },\r\n          }}\r\n        >\r\n          <Image\r\n            src={src ? src : noImage}\r\n            alt={src ? 'Uploaded Image' : 'No Image Available'}\r\n            sx={{\r\n              width: '90%',\r\n              height: 'auto',\r\n              borderRadius:\"10PX\",\r\n              objectFit: 'cover',\r\n              transition: 'transform 0.3s ease-in-out',\r\n              '&:hover': {\r\n                transform: 'scale(1.05)',\r\n              },\r\n            }}\r\n          />\r\n        </Box>\r\n  );\r\n};\r\nexport default ImageCard;\r\n","import { Box, Typography } from '@mui/material';\r\n\r\nexport default function DetailsList({ details }: { details: { label: string; value: string }[] }) {\r\n  return (\r\n    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>\r\n      {details.map(({ label, value }) => (\r\n        <Box key={label} display=\"flex\" alignItems=\"center\">\r\n          <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold', minWidth: 180,textTransform: 'capitalize' }}>\r\n            {label} :\r\n          </Typography>\r\n          <Typography variant=\"body1\" sx={{ textTransform: 'capitalize' }}>\r\n            {value}\r\n          </Typography>\r\n        </Box>\r\n      ))}\r\n    </Box>\r\n  );\r\n}\r\n","export const wellDetailseHeader = [\r\n  { id: 'photo', label: 'Photo', align: 'left' },\r\n  { id: 'update by sevak', label: 'Update by sevak', align: 'left' },\r\n  { id: 'last update', label: 'Last update', align: 'left' },\r\n];\r\n\r\nexport const wellTableHeader = [\r\n  { id: 'village', label: 'Village name', align: 'left' },\r\n  { id: 'level', label: 'Level', align: 'left' },\r\n  { id: 'update by sevak', label: 'Update by sevak', align: 'left' },\r\n  { id: 'last update', label: 'Last update', align: 'left' },\r\n  { id: 'action', label: 'Action', align: 'left' },\r\n];\r\n","import { useParams } from 'react-router-dom';\r\n// @mui\r\nimport { Card, Container, Grid, Typography, Box, TableContainer, TableBody } from '@mui/material';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// hooks\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'src/redux/store';\r\nimport { getWellsDetails, startLoading } from 'src/redux/slices/wells';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport { Table } from '@mui/material';\r\nimport { TableHeadCustom } from 'src/components/table';\r\nimport WellsDetailsRow from 'src/sections/@dashboard/user/list/WellsDetails';\r\nimport Scrollbar from 'src/components/Scrollbar';\r\nimport { SkeletonProduct } from 'src/components/skeleton';\r\nimport { wellDetailseHeader } from 'src/mockUp/Well';\r\nimport ImageCard from 'src/components/common/cards/imageCard';\r\nimport noImage from 'src/assets/images/noImage.jpg';\r\nimport DetailsList from 'src/components/common/detailsListing/listing';\r\n\r\nexport default function WellsDetails() {\r\n  const { id } = useParams();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      dispatch(startLoading());\r\n      dispatch(getWellsDetails(id));\r\n    }\r\n  }, [id, dispatch]);\r\n\r\n  const { wellsDetails, isLoading } = useSelector((state) => state.wells);\r\n  const { description, gpsLocation, level, photo, plotSize, stages, village, checkUpperGeo } =\r\n    wellsDetails;\r\n\r\n  const reverseGeoLocations = Array.isArray(checkUpperGeo?.parents)\r\n    ? [...checkUpperGeo.parents].reverse()\r\n    : [];\r\n\r\n  const details = [\r\n    { label: 'Description', value: description },\r\n    { label: 'GPS Location', value: gpsLocation },\r\n    { label: 'Level', value: level },\r\n    { label: 'Plot Size', value: `${plotSize ? `${plotSize} sq.ft.` : 'N/A'} ` },\r\n    {\r\n      label: 'Village',\r\n      value: `${checkUpperGeo?.name},${reverseGeoLocations?.map((item: any) => item?.name)}`,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Page title=\"Wells Details\">\r\n      <Container maxWidth={'xl'}>\r\n        <HeaderBreadcrumbs\r\n          heading=\"Wells Details\"\r\n          links={[\r\n            { name: 'Wells List', href: PATH_DASHBOARD.wells.list },\r\n            { name: 'Wells Details' },\r\n          ]}\r\n        />\r\n        <Card sx={{ p: 3 }}>\r\n          {isLoading ? (\r\n            <SkeletonProduct />\r\n          ) : (\r\n            <>\r\n              <Grid container spacing={4} justifyContent=\"center\">\r\n                {/* Image Section */}\r\n                <Grid item xs={12} sm={6} md={4} display={'flex'} justifyContent={'center'}>\r\n                  <ImageCard src={photo ? photo : noImage} />\r\n                </Grid>\r\n\r\n                {/* Details Section */}\r\n                <Grid item xs={12} sm={6} md={8}>\r\n                  <Typography variant=\"h5\" gutterBottom>\r\n                    Well Information\r\n                  </Typography>\r\n                  <DetailsList details={details} />\r\n                </Grid>\r\n              </Grid>\r\n              {/* stages Section */}\r\n              <Grid item xs={12} sm={6} md={8} pt={3}>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                  Stages Information\r\n                </Typography>\r\n                <Box\r\n                  sx={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    gap: 2,\r\n                    mt: 2,\r\n                  }}\r\n                >\r\n                  <Scrollbar>\r\n                    <TableContainer sx={{ minWidth: 800, position: 'relative' }}>\r\n                      <Table size={'medium'}>\r\n                        <TableHeadCustom headLabel={wellDetailseHeader} />\r\n\r\n                        <TableBody>\r\n                          {stages?.length\r\n                            ? stages.map((row: any, index: number) => (\r\n                                <WellsDetailsRow key={row.id} row={row} index={index} />\r\n                              ))\r\n                            : null}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </Scrollbar>\r\n                </Box>\r\n              </Grid>\r\n            </>\r\n          )}\r\n        </Card>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n","// @mui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { TableRow, TableCell, Typography } from '@mui/material';\r\n// components\r\nimport { formatedDate } from 'src/utils/formateDate';\r\nimport { Stage } from 'src/@types/wells';\r\nimport Image from 'src/components/Image';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ntype Props = {\r\n  row: Stage | null;\r\n  index: number;\r\n  pit?: boolean;\r\n  sevek?: boolean;\r\n};\r\n\r\nexport default function WellsDetailsRow({ row, pit }: Props) {\r\n  const theme = useTheme();\r\n\r\n  const { created, photo, updatedbySevek, stageName } = row || {};\r\n\r\n  return (\r\n    <TableRow>\r\n      <TableCell>\r\n        <Image\r\n          src={photo}\r\n          alt=\"Well Image\"\r\n          sx={{\r\n            width: '50%',\r\n            height: '120px',\r\n            borderRadius: 2,\r\n            objectFit: 'cover',\r\n            boxShadow: 3,\r\n          }}\r\n        />\r\n      </TableCell>\r\n\r\n      {pit ? (\r\n        <TableCell>\r\n          <Typography variant=\"subtitle2\" noWrap sx={{ textTransform: 'capitalize' }}>\r\n            {stageName ? stageName : '--'}\r\n          </Typography>\r\n        </TableCell>\r\n      ) : null}\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap sx={{ textTransform: 'capitalize' }}>\r\n          {updatedbySevek?.name ? updatedbySevek?.name : '--'}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {formatedDate(created)}\r\n        </Typography>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n","import moment from 'moment';\r\nexport function formatedDate(date?: Date | string | number) {\r\n  return moment(date).format('MM/DD/YYYY');\r\n}\r\n\r\nexport function formatedDateTime(date?: Date | string | number) {\r\n  return moment(date).format('MM/DD/YYYY hh:mm a');\r\n}\r\n"],"names":["src","sx","width","height","display","alignItems","justifyContent","borderRadius","overflow","boxShadow","transition","noImage","alt","objectFit","transform","DetailsList","details","flexDirection","gap","mt","map","label","value","variant","fontWeight","minWidth","textTransform","wellDetailseHeader","id","align","wellTableHeader","WellsDetails","useParams","dispatch","useDispatch","useEffect","startLoading","getWellsDetails","useSelector","state","wells","wellsDetails","isLoading","description","gpsLocation","level","photo","plotSize","stages","checkUpperGeo","village","reverseGeoLocations","Array","isArray","parents","reverse","name","item","title","maxWidth","heading","links","href","PATH_DASHBOARD","p","container","spacing","xs","sm","md","gutterBottom","pt","position","size","headLabel","length","row","index","WellsDetailsRow","pit","useTheme","created","updatedbySevek","stageName","noWrap","formatedDate","date","moment","format","formatedDateTime"],"sourceRoot":""}