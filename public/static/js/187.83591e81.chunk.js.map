{"version":3,"file":"static/js/187.83591e81.chunk.js","mappings":"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","sources":["pages/pits/PitsDetails.tsx","sections/@dashboard/user/list/WellsDetails.tsx","utils/formateDate.ts"],"sourcesContent":["import { useParams } from 'react-router-dom';\r\n// @mui\r\nimport { Card, Container, Grid, Typography, Box, TableContainer, TableBody } from '@mui/material';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// redux\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'src/redux/store';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport Image from 'src/components/Image';\r\nimport { Table } from '@mui/material';\r\nimport { TableHeadCustom } from 'src/components/table';\r\nimport WellsDetailsRow from 'src/sections/@dashboard/user/list/WellsDetails';\r\nimport Scrollbar from 'src/components/Scrollbar';\r\nimport { getPitDetails, startLoading } from 'src/redux/slices/pits';\r\nimport { SkeletonProduct } from 'src/components/skeleton';\r\n\r\nexport default function PitsDetails() {\r\n  const { id } = useParams();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      dispatch(startLoading());\r\n      dispatch(getPitDetails(id));\r\n    }\r\n  }, [id, dispatch]);\r\n\r\n  const { pitsDetails, isLoading } = useSelector((state) => state.pits);\r\n\r\n  const { farmer, gpsLocation, level, stageName, photo, plotSize, stages, checkUpperGeo } =\r\n    pitsDetails;\r\n\r\n  const reverseGeoLocations = Array.isArray(checkUpperGeo?.parents)\r\n    ? [...checkUpperGeo.parents].reverse()\r\n    : [];\r\n\r\n  const TABLE_HEAD = [\r\n    { id: 'photo', label: 'Photo', align: 'left' },\r\n    { id: 'stage ', label: 'Stage Name', align: 'left' },\r\n    { id: 'update by sevak', label: 'Update by sevak', align: 'left' },\r\n    { id: 'last update', label: 'Last update', align: 'left' },\r\n  ];\r\n\r\n  const details = [\r\n    { label: 'Farmer Name', value: farmer?.name },\r\n    { label: 'Stage', value: stageName },\r\n    { label: 'GPS Location', value: gpsLocation },\r\n    { label: 'Level', value: level },\r\n    { label: 'Plot Size', value: `${plotSize} sq.ft.` },\r\n    {\r\n      label: 'Village',\r\n      value: `${checkUpperGeo?.name},${reverseGeoLocations?.map((item: any) => item?.name)}`,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Page title=\"Pits Details\">\r\n      <Container maxWidth={'xl'}>\r\n        <HeaderBreadcrumbs\r\n          heading=\"Pits Details\"\r\n          links={[{ name: 'Pits List', href: PATH_DASHBOARD.pits.list }, { name: 'Pits Details' }]}\r\n        />\r\n        <Card sx={{ p: 3 }}>\r\n          {isLoading ? (\r\n            <SkeletonProduct />\r\n          ) : (\r\n            <>\r\n              <Grid container spacing={4} justifyContent=\"center\">\r\n                {/* Image Section */}\r\n                <Grid item xs={12} sm={6} md={4}>\r\n                  <Image\r\n                    src={photo}\r\n                    alt=\"Pits Image\"\r\n                    sx={{\r\n                      width: '100%',\r\n                      height: 'auto',\r\n                      borderRadius: 2,\r\n                      objectFit: 'cover',\r\n                      boxShadow: 3,\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/* Details Section */}\r\n                <Grid item xs={12} sm={6} md={8}>\r\n                  <Typography variant=\"h5\" gutterBottom>\r\n                    Pits Information\r\n                  </Typography>\r\n                  <Box\r\n                    sx={{\r\n                      display: 'flex',\r\n                      flexDirection: 'column',\r\n                      gap: 2,\r\n                      mt: 2,\r\n                    }}\r\n                  >\r\n                    {details?.map(({ label, value }) => (\r\n                      <Box\r\n                        key={label}\r\n                        display=\"flex\"\r\n                        // justifyContent=\"space-between\"\r\n                        alignItems=\"center\"\r\n                      >\r\n                        <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold', minWidth: 120 }}>\r\n                          {label} :\r\n                        </Typography>\r\n                        <Typography\r\n                          variant=\"body1\"\r\n                          sx={{\r\n                            ...(label === 'Plot Size' ? {} : { textTransform: 'capitalize' }),\r\n                          }}\r\n                        >\r\n                          {value}\r\n                        </Typography>\r\n                      </Box>\r\n                    ))}\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n              {/* stages Section */}\r\n              <Grid item xs={12} sm={6} md={8} pt={3}>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                  Stages Information\r\n                </Typography>\r\n                <Box\r\n                  sx={{\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    gap: 2,\r\n                    mt: 2,\r\n                  }}\r\n                >\r\n                  <Scrollbar>\r\n                    <TableContainer sx={{ minWidth: 800, position: 'relative' }}>\r\n                      <Table size={'medium'}>\r\n                        <TableHeadCustom headLabel={TABLE_HEAD} />\r\n\r\n                        <TableBody>\r\n                          {stages?.length\r\n                            ? stages?.map((row: any, index: number) => (\r\n                                <WellsDetailsRow key={row.id} row={row} index={index} pit={true} />\r\n                              ))\r\n                            : null}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </Scrollbar>\r\n                </Box>\r\n              </Grid>\r\n            </>\r\n          )}\r\n        </Card>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n","// @mui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { TableRow, TableCell, Typography } from '@mui/material';\r\n// components\r\nimport { formatedDate } from 'src/utils/formateDate';\r\nimport { Stage } from 'src/@types/wells';\r\nimport Image from 'src/components/Image';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ntype Props = {\r\n  row: Stage | null;\r\n  index: number;\r\n  pit?: boolean;\r\n  sevek?: boolean;\r\n};\r\n\r\nexport default function WellsDetailsRow({ row, pit }: Props) {\r\n  const theme = useTheme();\r\n\r\n  const { created, photo, updatedbySevek, stageName } = row || {};\r\n\r\n  return (\r\n    <TableRow>\r\n      <TableCell>\r\n        <Image\r\n          src={photo}\r\n          alt=\"Well Image\"\r\n          sx={{\r\n            width: '50%',\r\n            height: '120px',\r\n            borderRadius: 2,\r\n            objectFit: 'cover',\r\n            boxShadow: 3,\r\n          }}\r\n        />\r\n      </TableCell>\r\n\r\n      {pit ? (\r\n        <TableCell>\r\n          <Typography variant=\"subtitle2\" noWrap sx={{ textTransform: 'capitalize' }}>\r\n            {stageName ? stageName : '--'}\r\n          </Typography>\r\n        </TableCell>\r\n      ) : null}\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap sx={{ textTransform: 'capitalize' }}>\r\n          {updatedbySevek?.name ? updatedbySevek?.name : '--'}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {formatedDate(created)}\r\n        </Typography>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n","import moment from 'moment';\r\nexport function formatedDate(date?: Date | string | number) {\r\n  return moment(date).format('MM/DD/YYYY');\r\n}\r\n\r\nexport function formatedDateTime(date?: Date | string | number) {\r\n  return moment(date).format('MM/DD/YYYY hh:mm a');\r\n}\r\n"],"names":["PitsDetails","id","useParams","dispatch","useDispatch","useEffect","startLoading","getPitDetails","useSelector","state","pits","pitsDetails","isLoading","farmer","gpsLocation","level","stageName","photo","plotSize","stages","checkUpperGeo","reverseGeoLocations","Array","isArray","parents","reverse","details","label","value","name","map","item","title","maxWidth","heading","links","href","PATH_DASHBOARD","sx","p","container","spacing","justifyContent","xs","sm","md","src","alt","width","height","borderRadius","objectFit","boxShadow","variant","gutterBottom","display","flexDirection","gap","mt","alignItems","fontWeight","minWidth","textTransform","pt","position","size","headLabel","align","length","row","index","pit","WellsDetailsRow","useTheme","created","updatedbySevek","noWrap","formatedDate","date","moment","format","formatedDateTime"],"sourceRoot":""}