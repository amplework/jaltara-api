{"version":3,"file":"static/js/8379.574455fc.chunk.js","mappings":"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","sources":["components/common/cards/imageCard/index.tsx","components/common/detailsListing/listing/index.tsx","mockUp/Farmer.ts","sections/@dashboard/user/list/FarmerPitsDetails.tsx","components/common/title/TitleHeader.tsx","utils/getColorName.ts","components/common/detailsListing/selectedCrops/index.tsx","pages/farmers/FarmerDetails.tsx","utils/formateDate.ts"],"sourcesContent":["import { Box, Grid } from '@mui/material';\r\nimport Image from 'src/components/Image';\r\nimport noImage from 'src/assets/images/noImage.jpg';\r\n\r\nconst ImageCard = ({ src }: { src: string | null }) => {\r\n  return (\r\n        <Box\r\n          sx={{\r\n            width: 300,\r\n            height: 300,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            borderRadius: 2,\r\n            overflow: 'hidden',\r\n            boxShadow: 3,\r\n            transition: 'box-shadow 0.3s ease-in-out',\r\n            '&:hover': {\r\n              boxShadow: 6,\r\n            },\r\n          }}\r\n        >\r\n          <Image\r\n            src={src ? src : noImage}\r\n            alt={src ? 'Uploaded Image' : 'No Image Available'}\r\n            sx={{\r\n              width: '90%',\r\n              height: 'auto',\r\n              borderRadius:\"10PX\",\r\n              objectFit: 'cover',\r\n              transition: 'transform 0.3s ease-in-out',\r\n              '&:hover': {\r\n                transform: 'scale(1.05)',\r\n              },\r\n            }}\r\n          />\r\n        </Box>\r\n  );\r\n};\r\nexport default ImageCard;\r\n","import { Box, Typography } from '@mui/material';\r\n\r\nexport default function DetailsList({ details }: { details: { label: string; value: string }[] }) {\r\n  return (\r\n    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>\r\n      {details.map(({ label, value }) => (\r\n        <Box key={label} display=\"flex\" alignItems=\"center\">\r\n          <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold', minWidth: 180,textTransform: 'capitalize' }}>\r\n            {label} :\r\n          </Typography>\r\n          <Typography variant=\"body1\" sx={{ textTransform: 'capitalize' }}>\r\n            {value}\r\n          </Typography>\r\n        </Box>\r\n      ))}\r\n    </Box>\r\n  );\r\n}\r\n","export const farmerTableHeader = [\r\n    { id: 'name', label: 'Name', align: 'left' },\r\n    { id: 'land', label: 'Land (acres)', align: 'left' },\r\n    { id: 'village', label: 'Village', align: 'left' },\r\n    { id: 'language', label: 'Language', align: 'left' },\r\n    { id: 'pits', label: `Total pit's`, align: 'left' },\r\n    { id: 'action', label: 'Action', align: 'left' },\r\n  ];\r\n  \r\n  export const farmerLogsHeader = [\r\n    { id: 'photo', label: 'Photo', align: 'left' },\r\n    { id: 'name ', label: 'Name', align: 'left' },\r\n    { id: 'level ', label: 'Level', align: 'left' },\r\n    { id: 'plot ', label: 'Plot Size', align: 'left' },\r\n    { id: 'stage ', label: 'Stage Name', align: 'left' },\r\n    { id: 'last update', label: 'Last update', align: 'left' },\r\n  ];","import { TableRow, TableCell, Typography, Box } from '@mui/material';\r\n// components\r\nimport { formatedDate } from 'src/utils/formateDate';\r\nimport Image from 'src/components/Image';\r\nimport noImage from 'src/assets/images/noImage.jpg';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ntype Props = {\r\n  row: any;\r\n  index: number;\r\n};\r\n\r\nexport default function FarmerPitsDetails({ row }: Props) {\r\n  const { photo, level, stages, plotSize } = row || {};\r\n\r\n  const pitStageName = stages?.[0]?.stageName || 'N/A';\r\n  const pitName = stages?.[0]?.updatedbySevek?.name || 'N/A';\r\n  const pitStageUpdatedDate = stages?.[0]?.modified ? formatedDate(stages[0].modified) : 'N/A';\r\n\r\n  return (\r\n    <TableRow>\r\n      <TableCell>\r\n        <Image\r\n          src={photo}\r\n          alt=\"Well Image\"\r\n          sx={{\r\n            width: '50%',\r\n            height: '120px',\r\n            borderRadius: 2,\r\n            objectFit: 'cover',\r\n            boxShadow: 3,\r\n          }}\r\n        />\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {pitName}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {level}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {plotSize}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {pitStageName}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {pitStageUpdatedDate}\r\n        </Typography>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n","import { Box, Typography } from '@mui/material';\r\n\r\nconst SectionHeader = ({ title }: { title: string }) => {\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      justifyContent=\"center\"\r\n      sx={{\r\n        boxShadow: '0px 4px 12px rgba(55, 155, 155, 0.3)',\r\n        padding: 2,\r\n        borderRadius: 1,\r\n        bgcolor: 'rgba(209, 235, 230, 0.8)',\r\n      }}\r\n    >\r\n      <Typography variant=\"subtitle1\" fontWeight=\"bold\" sx={{ color: 'text.primary' }}>\r\n        {title}\r\n      </Typography>\r\n    </Box>\r\n  );\r\n};\r\nexport default SectionHeader\r\n","// ----------------------------------------------------------------------\r\n\r\nexport default function getColorName(hex: string) {\r\n  let color;\r\n\r\n  switch (hex) {\r\n    case '#00AB55':\r\n      color = 'Green';\r\n      break;\r\n    case '#000000':\r\n      color = 'Black';\r\n      break;\r\n    case '#FFFFFF':\r\n      color = 'White';\r\n      break;\r\n    case '#FFC0CB':\r\n      color = 'Pink';\r\n      break;\r\n    case '#FF4842':\r\n      color = 'Red';\r\n      break;\r\n    case '#1890FF':\r\n      color = 'Blue';\r\n      break;\r\n    case '#94D82D':\r\n      color = 'Greenyellow';\r\n      break;\r\n    case '#FFC107':\r\n      color = 'Orange';\r\n      break;\r\n    default:\r\n      color = hex;\r\n  }\r\n\r\n  return color;\r\n}\r\n\r\n\r\nexport function getRandomExtremelyLightColor() {\r\n  const r = Math.floor(Math.random() * 26 + 230); // Red: 230-255\r\n  const g = Math.floor(Math.random() * 26 + 230); // Green: 230-255\r\n  const b = Math.floor(Math.random() * 26 + 230); // Blue: 230-255\r\n\r\n  return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;\r\n}","import { Box, Typography } from '@mui/material';\r\nimport SectionHeader from '../../title/TitleHeader';\r\nimport { getRandomExtremelyLightColor } from 'src/utils/getColorName';\r\n\r\ninterface SelectedCropsProps {\r\n  data: any;\r\n  title: string;\r\n}\r\nconst SelectedCrops = ({ data, title }: SelectedCropsProps) => {\r\n  return (\r\n    <Box>\r\n      <SectionHeader title={title} />\r\n      <Box sx={{ my: 2 }}>\r\n        {data && data?.length > 0 ? (\r\n          <Box display=\"flex\" sx={{ flexWrap: 'wrap' }}>\r\n            {data?.map((item: any, index: number) => (\r\n              <Typography\r\n                key={index}\r\n                variant=\"body2\"\r\n                mx={1}\r\n                sx={{\r\n                  bgcolor: getRandomExtremelyLightColor(),\r\n                  p: 2,\r\n                  mb: 1,\r\n                  borderRadius: '10px',\r\n                  textTransform: 'capitalize',\r\n                }}\r\n              >\r\n                {item || 'N/A'}\r\n              </Typography>\r\n            ))}\r\n          </Box>\r\n        ) : (\r\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n            N/A\r\n          </Typography>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\nexport default SelectedCrops;\r\n","import { useParams } from 'react-router-dom';\r\n// @mui\r\nimport {\r\n  Card,\r\n  Container,\r\n  Grid,\r\n  Typography,\r\n  Box,\r\n  TableContainer,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  useTheme,\r\n} from '@mui/material';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// redux\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'src/redux/store';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport { Table } from '@mui/material';\r\nimport { TableHeadCustom } from 'src/components/table';\r\nimport Scrollbar from 'src/components/Scrollbar';\r\nimport noImage from 'src/assets/images/noImage.jpg';\r\nimport { getFarmerDetails, startLoading } from 'src/redux/slices/farmers';\r\nimport { formatedDate } from 'src/utils/formateDate';\r\nimport FarmerPitsDetails from 'src/sections/@dashboard/user/list/FarmerPitsDetails';\r\nimport { SkeletonProduct } from 'src/components/skeleton';\r\nimport ImageCard from 'src/components/common/cards/imageCard';\r\nimport DetailsList from 'src/components/common/detailsListing/listing';\r\nimport SelectedCrops from 'src/components/common/detailsListing/selectedCrops';\r\nimport { farmerLogsHeader } from 'src/mockUp/Farmer';\r\n\r\n\r\nexport default function FarmerDetails() {\r\n  const { id } = useParams();\r\n  const theme = useTheme();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      dispatch(startLoading());\r\n      dispatch(getFarmerDetails(id));\r\n    }\r\n  }, [id, dispatch]);\r\n\r\n  const { farmersDetails, isLoading } = useSelector((state) => state.farmer);\r\n\r\n  const {\r\n    photo,\r\n    name,\r\n    phone,\r\n    language,\r\n    checkUpperGeo,\r\n    land,\r\n    familyMemberNumber,\r\n    farmAvailableDate,\r\n    isParticipate,\r\n    farmingChallenge,\r\n    crops,\r\n    pits,\r\n  } = farmersDetails;\r\n\r\n  const reverseGeoLocations = Array.isArray(checkUpperGeo?.parents)\r\n    ? [...checkUpperGeo.parents].reverse()\r\n    : [];\r\n\r\n  const details = [\r\n    { label: 'Name', value: name },\r\n    // { label: 'Language', value: language },\r\n    { label: 'Phone', value: phone },\r\n    { label: 'Land', value: land },\r\n    { label: 'Family member', value: familyMemberNumber },\r\n    { label: 'Farmer available date', value: formatedDate(farmAvailableDate) },\r\n    { label: 'Is participate', value: isParticipate ? 'Yes' : 'No' },\r\n    {\r\n      label: 'Village',\r\n      value: `${\r\n        checkUpperGeo?.name\r\n          ? `${checkUpperGeo?.name} ${reverseGeoLocations\r\n              ?.map((item: any, index: number) => `${index === 0 ? `${','}` : ','}${item?.name}`)\r\n              .join(' ')}`\r\n          : 'N/A'\r\n      }`,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Page title=\"Farmer Details\">\r\n      <Container maxWidth={'xl'}>\r\n        <HeaderBreadcrumbs\r\n          heading=\"Farmer Details\"\r\n          links={[\r\n            { name: 'Farmer List', href: PATH_DASHBOARD.farmers.list },\r\n            { name: 'Farmer Details' },\r\n          ]}\r\n        />\r\n\r\n        <Card sx={{ p: 3, boxShadow: 3, borderRadius: 2 }}>\r\n          {isLoading ? (\r\n            <SkeletonProduct />\r\n          ) : (\r\n            <Grid container spacing={4} justifyContent=\"center\">\r\n              {/* Image Section */}\r\n              <Grid item xs={12} sm={6} md={4} display={'flex'} justifyContent={'center'}>\r\n                <ImageCard src={photo ? photo : noImage} />\r\n              </Grid>\r\n\r\n              {/* Details Section */}\r\n              <Grid item xs={12} sm={6} md={8}>\r\n                <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mb: 2 }}>\r\n                  Farmer Information\r\n                </Typography>\r\n                <DetailsList details={details} />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {/* crops and challanges Listing */}\r\n          {isLoading ? (\r\n            <SkeletonProduct />\r\n          ) : (\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2, pl: 1 }}>\r\n              <SelectedCrops\r\n                title=\"Crops\"\r\n                data={crops?.map((item: any) => item?.name) || ['N/A']}\r\n              />\r\n              <SelectedCrops\r\n                title=\"Farming Challenges\"\r\n                data={farmingChallenge?.map((item: any) => item?.challenge) || ['N/A']}\r\n              />\r\n            </Box>\r\n          )}\r\n\r\n          {/* Stages Section */}\r\n          {pits && (\r\n            <Grid item xs={12} sm={12} md={12} pt={3}>\r\n              <Typography variant=\"h5\" sx={{ fontWeight: 'bold', mb: 2 }}>\r\n                Pit Information\r\n              </Typography>\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  gap: 2,\r\n                }}\r\n              >\r\n                <Scrollbar>\r\n                  <TableContainer sx={{ minWidth: 800, boxShadow: 3, borderRadius: 2 }}>\r\n                    <Table size=\"medium\">\r\n                      <TableHeadCustom headLabel={farmerLogsHeader} />\r\n                      <TableBody>\r\n                        {pits?.length > 0 ? (\r\n                          pits?.map((row: any, index: number) => (\r\n                            <FarmerPitsDetails key={row.id} row={row} index={index} />\r\n                          ))\r\n                        ) : (\r\n                          <TableRow>\r\n                            <TableCell colSpan={farmerLogsHeader?.length} align=\"center\">\r\n                              No data available\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </Scrollbar>\r\n              </Box>\r\n            </Grid>\r\n          )}\r\n        </Card>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n","import moment from 'moment';\r\nexport function formatedDate(date?: Date | string | number) {\r\n  return moment(date).format('MM/DD/YYYY');\r\n}\r\n\r\nexport function formatedDateTime(date?: Date | string | number) {\r\n  return moment(date).format('MM/DD/YYYY hh:mm a');\r\n}\r\n"],"names":["src","sx","width","height","display","alignItems","justifyContent","borderRadius","overflow","boxShadow","transition","noImage","alt","objectFit","transform","DetailsList","details","flexDirection","gap","mt","map","label","value","variant","fontWeight","minWidth","textTransform","farmerTableHeader","id","align","farmerLogsHeader","FarmerPitsDetails","row","photo","level","stages","plotSize","pitStageName","stageName","pitName","updatedbySevek","name","pitStageUpdatedDate","modified","formatedDate","TableRow","TableCell","Image","Typography","noWrap","title","Box","padding","bgcolor","color","getRandomExtremelyLightColor","r","Math","floor","random","g","b","toString","slice","data","my","length","flexWrap","item","index","mx","p","mb","FarmerDetails","useParams","dispatch","useTheme","useDispatch","useEffect","startLoading","getFarmerDetails","useSelector","state","farmer","farmersDetails","isLoading","phone","checkUpperGeo","language","land","familyMemberNumber","farmAvailableDate","isParticipate","farmingChallenge","crops","pits","reverseGeoLocations","Array","isArray","parents","reverse","join","Page","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","PATH_DASHBOARD","Card","Grid","container","spacing","xs","sm","md","pl","challenge","pt","Scrollbar","TableContainer","Table","size","headLabel","TableBody","colSpan","date","moment","format","formatedDateTime"],"sourceRoot":""}