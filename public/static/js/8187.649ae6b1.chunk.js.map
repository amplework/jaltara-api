{"version":3,"file":"static/js/8187.649ae6b1.chunk.js","mappings":"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","sources":["components/common/cards/imageCard/index.tsx","components/common/detailsListing/listing/index.tsx","sections/@dashboard/user/list/SevekPitsList.tsx","sections/@dashboard/user/list/SevekPitsCount.tsx","components/common/cards/summaryCard/index.tsx","pages/sevak/SevakDetails.tsx","utils/formateDate.ts"],"sourcesContent":["import { Box, Grid } from '@mui/material';\r\nimport Image from 'src/components/Image';\r\nimport noImage from 'src/assets/images/noImage.jpg';\r\n\r\nconst ImageCard = ({ src }: { src: string | null }) => {\r\n  return (\r\n        <Box\r\n          sx={{\r\n            width: 300,\r\n            height: 300,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            borderRadius: 2,\r\n            overflow: 'hidden',\r\n            boxShadow: 3,\r\n            transition: 'box-shadow 0.3s ease-in-out',\r\n            '&:hover': {\r\n              boxShadow: 6,\r\n            },\r\n          }}\r\n        >\r\n          <Image\r\n            src={src ? src : noImage}\r\n            alt={src ? 'Uploaded Image' : 'No Image Available'}\r\n            sx={{\r\n              width: '90%',\r\n              height: 'auto',\r\n              borderRadius:\"10PX\",\r\n              objectFit: 'cover',\r\n              transition: 'transform 0.3s ease-in-out',\r\n              '&:hover': {\r\n                transform: 'scale(1.05)',\r\n              },\r\n            }}\r\n          />\r\n        </Box>\r\n  );\r\n};\r\nexport default ImageCard;\r\n","import { Box, Typography } from '@mui/material';\r\n\r\nexport default function DetailsList({ details }: { details: { label: string; value: string }[] }) {\r\n  return (\r\n    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>\r\n      {details.map(({ label, value }) => (\r\n        <Box key={label} display=\"flex\" alignItems=\"center\">\r\n          <Typography variant=\"subtitle2\" sx={{ fontWeight: 'bold', minWidth: 180,textTransform: 'capitalize' }}>\r\n            {label} :\r\n          </Typography>\r\n          <Typography variant=\"body1\" sx={{ textTransform: 'capitalize' }}>\r\n            {value}\r\n          </Typography>\r\n        </Box>\r\n      ))}\r\n    </Box>\r\n  );\r\n}\r\n","import { TableRow, TableCell, Typography } from '@mui/material';\r\n// components\r\nimport { formatedDate } from 'src/utils/formateDate';\r\nimport Image from 'src/components/Image';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ntype Props = {\r\n  row: any;\r\n};\r\n\r\nexport default function SevekPitsList({ row }: Props) {\r\n\r\n  const { created, photo, stageName, pitId, wellId, pit, well } = row || {};\r\n\r\n  return (\r\n    <TableRow>\r\n      <TableCell>\r\n        <Image\r\n          src={photo}\r\n          alt=\"Well Image\"\r\n          sx={{\r\n            width: '50%',\r\n            height: '120px',\r\n            borderRadius: 2,\r\n            objectFit: 'cover',\r\n            boxShadow: 3,\r\n          }}\r\n        />\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {pitId ? 'Pit' : wellId ? 'Well' : '--'}\r\n        </Typography>\r\n      </TableCell>\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {pitId ? pit?.farmer?.name : '--'}\r\n        </Typography>\r\n      </TableCell>\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {pitId ? pit?.village?.name : wellId ? well?.village?.name : '--'}\r\n        </Typography>\r\n      </TableCell>\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {stageName}\r\n        </Typography>\r\n      </TableCell>\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n        {pitId ? pit?.level : wellId ? well?.level : '--'}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {formatedDate(created)}\r\n        </Typography>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n","// @mui\r\nimport { alpha, styled } from '@mui/material/styles';\r\nimport { Box, Card, Typography, CardProps } from '@mui/material';\r\n// components\r\nimport { SkeletonPostItem } from 'src/components/skeleton';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst IconWrapperStyle = styled('div')(({ theme }) => ({\r\n  width: 24,\r\n  height: 24,\r\n  display: 'flex',\r\n  borderRadius: '50%',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  color: theme.palette.success.main,\r\n  backgroundColor: alpha(theme.palette.success.main, 0.16),\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ninterface Props extends CardProps {\r\n  title: string;\r\n  total: number | string | undefined;\r\n  isLoading?: boolean;\r\n}\r\n\r\nexport default function SevekSummary({ title, total, sx,isLoading, ...other }: Props) {\r\n  return (\r\n    <Card sx={{ display: 'flex', alignItems: 'center', p: 3, ...sx }} {...other}>\r\n      {isLoading ? (\r\n        <SkeletonPostItem />\r\n      ) : (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n          <Typography variant=\"subtitle2\" textAlign={'center'}>\r\n            {title}\r\n          </Typography>\r\n          <Typography variant=\"h3\" textAlign={'center'}>\r\n            {total}\r\n          </Typography>\r\n        </Box>\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\n","import { Grid } from '@mui/material';\r\nimport SevekSummary from 'src/sections/@dashboard/user/list/SevekPitsCount';\r\n\r\ninterface SummaryCardsProps{\r\n     data: any[];\r\n      isLoading: boolean \r\n}\r\n\r\nexport default function SummaryCards({ data, isLoading }:SummaryCardsProps) {\r\n  return (\r\n    <Grid container spacing={3} pb={2}>\r\n      {data.map((item, index) => (\r\n        <Grid item xs={12} md={4} key={index}>\r\n          <SevekSummary title={item.title} total={item.total} isLoading={isLoading} />\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n}","import { useParams } from 'react-router-dom';\r\n// @mui\r\nimport { Card, Container, Grid, Typography, Box, TableContainer, TableBody } from '@mui/material';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// hooks\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'src/redux/store';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport { Table } from '@mui/material';\r\nimport { TableHeadCustom } from 'src/components/table';\r\nimport Scrollbar from 'src/components/Scrollbar';\r\nimport { detailsLoading, getUsersDetails } from 'src/redux/slices/user';\r\nimport SevekPitsList from 'src/sections/@dashboard/user/list/SevekPitsList';\r\nimport noImage from 'src/assets/images/noImage.jpg';\r\nimport { SkeletonProduct } from 'src/components/skeleton';\r\nimport SummaryCards from 'src/components/common/cards/summaryCard';\r\nimport ImageCard from 'src/components/common/cards/imageCard';\r\nimport DetailsList from 'src/components/common/detailsListing/listing';\r\n\r\nexport default function SevekDetails() {\r\n  const { id } = useParams();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      dispatch(detailsLoading());\r\n      dispatch(getUsersDetails(id));\r\n    }\r\n  }, [id, dispatch]);\r\n\r\n  const { usersDetails, isDetailsLoading } = useSelector((state) => state.user);\r\n  console.log('usersDetails', usersDetails);\r\n\r\n  const {\r\n    photo,\r\n    name,\r\n    phone,\r\n    status,\r\n    language,\r\n    checkUpperGeo,\r\n    stages,\r\n    pitCount,\r\n    wellCount,\r\n    farmerCount,\r\n  } = usersDetails;\r\n\r\n  const reverseGeoLocations = Array.isArray(checkUpperGeo?.parents)\r\n    ? [...checkUpperGeo.parents].reverse()\r\n    : [];\r\n\r\n  const TABLE_HEAD = [\r\n    { id: 'photo', label: 'Photo', align: 'left' },\r\n    { id: 'status ', label: 'Status', align: 'left' },\r\n    { id: 'fname ', label: 'Farmer Name', align: 'left' },\r\n    { id: 'vname ', label: 'Village Name', align: 'left' },\r\n    { id: 'stage ', label: 'Stage Name', align: 'left' },\r\n    { id: 'level ', label: 'Level', align: 'left' },\r\n    { id: 'last update', label: 'Last update', align: 'left' },\r\n  ];\r\n\r\n  const details = [\r\n    { label: 'Name', value: name },\r\n    {\r\n      label: 'Language',\r\n      value: language === 'mr' ? 'मराठी' : language === 'hi' ? 'हिन्दी' : 'English',\r\n    },\r\n    { label: 'Phone', value: phone },\r\n    { label: 'Status', value: status },\r\n    {\r\n      label: 'Village',\r\n      value: `${checkUpperGeo?.name} ${reverseGeoLocations?.map(\r\n        (item: any, index: number) => `${index === 0 ? `${','}` : ''}${item?.name}`\r\n      )}`,\r\n    },\r\n  ];\r\n\r\n  const cardDetails = [\r\n    { title: 'Total Pit Count', total: pitCount },\r\n    { title: 'Total Well Count', total: wellCount },\r\n    { title: 'Total Farmer Count', total: farmerCount },\r\n  ];\r\n\r\n  return (\r\n    <Page title=\"Sevak Details\">\r\n      <Container maxWidth={'xl'}>\r\n        <HeaderBreadcrumbs\r\n          heading=\"Sevak Details\"\r\n          links={[\r\n            { name: 'Sevak List', href: PATH_DASHBOARD.sevak.list },\r\n            { name: 'Sevak Details' },\r\n          ]}\r\n        />\r\n        <SummaryCards data={cardDetails} isLoading={isDetailsLoading} />\r\n\r\n        <Card sx={{ p: 3 }}>\r\n          {isDetailsLoading ? (\r\n            <SkeletonProduct />\r\n          ) : (\r\n            <Grid container spacing={4} justifyContent=\"center\">\r\n              {/* Image Section */}\r\n              <Grid item xs={12} sm={6} md={4} display={'flex'} justifyContent={'center'}>\r\n                <ImageCard src={photo ? photo : noImage} />\r\n              </Grid>\r\n\r\n              {/* Details Section */}\r\n              <Grid item xs={12} sm={6} md={8}>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                  Sevak Information\r\n                </Typography>\r\n                <DetailsList details={details} />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n\r\n          {/* stages Section */}\r\n          {usersDetails?.stages && (\r\n            <Grid item xs={12} sm={6} md={8} pt={3}>\r\n              <Typography variant=\"h5\" gutterBottom>\r\n                Pit , well and it's Stages Information\r\n              </Typography>\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  gap: 2,\r\n                  mt: 2,\r\n                }}\r\n              >\r\n                <Scrollbar>\r\n                  <TableContainer sx={{ minWidth: 800, position: 'relative' }}>\r\n                    <Table size={'medium'}>\r\n                      <TableHeadCustom headLabel={TABLE_HEAD} />\r\n                      <TableBody>\r\n                        {stages?.length\r\n                          ? stages?.map((row: any, index: number) => (\r\n                              <SevekPitsList key={row.id} row={row} />\r\n                            ))\r\n                          : null}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </Scrollbar>\r\n              </Box>\r\n            </Grid>\r\n          )}\r\n        </Card>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n","import moment from 'moment';\r\nexport function formatedDate(date?: Date | string | number) {\r\n  return moment(date).format('MM/DD/YYYY');\r\n}\r\n\r\nexport function formatedDateTime(date?: Date | string | number) {\r\n  return moment(date).format('MM/DD/YYYY hh:mm a');\r\n}\r\n"],"names":["src","sx","width","height","display","alignItems","justifyContent","borderRadius","overflow","boxShadow","transition","noImage","alt","objectFit","transform","DetailsList","details","flexDirection","gap","mt","map","label","value","variant","fontWeight","minWidth","textTransform","SevekPitsList","row","created","photo","stageName","pitId","wellId","pit","well","TableRow","TableCell","Image","Typography","noWrap","farmer","name","village","level","formatedDate","styled","theme","color","palette","success","main","backgroundColor","alpha","SevekSummary","title","total","isLoading","other","Card","p","Box","flexGrow","textAlign","SummaryCards","data","Grid","container","spacing","pb","item","index","xs","md","SevekDetails","id","useParams","dispatch","useDispatch","useEffect","detailsLoading","getUsersDetails","useSelector","state","user","usersDetails","isDetailsLoading","console","log","phone","status","language","checkUpperGeo","stages","pitCount","wellCount","farmerCount","reverseGeoLocations","Array","isArray","parents","reverse","cardDetails","Page","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","PATH_DASHBOARD","sm","gutterBottom","pt","Scrollbar","TableContainer","position","Table","size","headLabel","align","TableBody","length","date","moment","format","formatedDateTime"],"sourceRoot":""}