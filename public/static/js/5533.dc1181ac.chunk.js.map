{"version":3,"file":"static/js/5533.dc1181ac.chunk.js","mappings":"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","sources":["mockUp/Farmer.ts","sections/@dashboard/user/list/FarmerTableRow.tsx","pages/farmers/FarmersList.tsx"],"sourcesContent":["export const farmerTableHeader = [\r\n    { id: 'name', label: 'Name', align: 'left' },\r\n    { id: 'land', label: 'Land (acres)', align: 'left' },\r\n    { id: 'village', label: 'Village', align: 'left' },\r\n    { id: 'language', label: 'Language', align: 'left' },\r\n    { id: 'pits', label: `Total pit's`, align: 'left' },\r\n    { id: 'action', label: 'Action', align: 'left' },\r\n  ];\r\n  \r\n  export const farmerLogsHeader = [\r\n    { id: 'photo', label: 'Photo', align: 'left' },\r\n    { id: 'name ', label: 'Name', align: 'left' },\r\n    { id: 'level ', label: 'Level', align: 'left' },\r\n    { id: 'plot ', label: 'Plot Size', align: 'left' },\r\n    { id: 'stage ', label: 'Stage Name', align: 'left' },\r\n    { id: 'last update', label: 'Last update', align: 'left' },\r\n  ];","import { useState } from 'react';\r\n// @mui\r\nimport { TableRow, TableCell, Typography, MenuItem } from '@mui/material';\r\n// components\r\nimport Iconify from '../../../../components/Iconify';\r\nimport { TableMoreMenu } from '../../../../components/table';\r\nimport { FarmerListData } from 'src/@types/farmer';\r\nimport { languageList } from 'src/mockUp/Sevak';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ntype Props = {\r\n  row: FarmerListData | null;\r\n  onhandleEditDetails?: (id: any) => void;\r\n  onhandleDeleteRow?: (id: any, name: any) => void;\r\n  handleShowDetails?: (id: any) => void;\r\n};\r\n\r\nexport default function FarmerTableRow({\r\n  row,\r\n  onhandleEditDetails,\r\n  onhandleDeleteRow,\r\n  handleShowDetails,\r\n}: Props) {\r\n  const [openMenu, setOpenMenuActions] = useState<HTMLElement | null>(null);\r\n  const handleOpenMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    setOpenMenuActions(event.currentTarget);\r\n  };\r\n  const handleCloseMenu = () => {\r\n    setOpenMenuActions(null);\r\n  };\r\n\r\n  const { name, id, land, village, language, totalPits, villageId } = row || {};\r\n  console.log('row', villageId);\r\n\r\n  return (\r\n    <TableRow hover>\r\n      <TableCell\r\n        sx={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}\r\n        onClick={() => handleShowDetails && handleShowDetails(id)}\r\n      >\r\n        {/* {photo ? (\r\n          <Image alt=\"cover\" src={photo} ratio=\"16/9\" />\r\n        ) : (\r\n          <Avatar alt={name} src={''} sx={{ mr: 2 }} />\r\n        )} */}\r\n\r\n        <Typography variant=\"subtitle2\" noWrap sx={{ cursor: 'default' }}>\r\n          {name}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap sx={{ cursor: 'default' }}>\r\n          {land ? land : '--'}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap sx={{ cursor: 'default' }}>\r\n          {village ? village?.name : '--'}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell sx={{ cursor: 'default' }}>\r\n        <Typography variant=\"subtitle2\" noWrap sx={{ textTransform: 'capitalize' }}>\r\n          {language ? languageList.find((item) => item?.id === language)?.label || '--' : '--'}\r\n        </Typography>\r\n      </TableCell>\r\n      <TableCell sx={{ cursor: 'default' }}>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {totalPits ? totalPits : '--'}\r\n        </Typography>\r\n      </TableCell>\r\n      <TableCell align=\"left\">\r\n        <TableMoreMenu\r\n          open={openMenu}\r\n          onOpen={handleOpenMenu}\r\n          onClose={handleCloseMenu}\r\n          actions={\r\n            <>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  if (villageId !== '111111111111111111111111') {\r\n                    if (onhandleEditDetails) {\r\n                      onhandleEditDetails(id);\r\n                    }\r\n                    handleCloseMenu();\r\n                  }\r\n                }}\r\n              >\r\n                <Iconify icon={'eva:edit-fill'} />\r\n                Edit\r\n              </MenuItem>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  onhandleDeleteRow && onhandleDeleteRow(id, name);\r\n                  handleCloseMenu();\r\n                }}\r\n                sx={{ color: 'error.main' }}\r\n              >\r\n                <Iconify icon={'eva:trash-2-outline'} />\r\n                Delete\r\n              </MenuItem>\r\n            </>\r\n          }\r\n        />\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n// @mui\r\nimport {\r\n  Box,\r\n  Card,\r\n  Table,\r\n  Button,\r\n  TableBody,\r\n  Container,\r\n  TableContainer,\r\n  TablePagination,\r\n} from '@mui/material';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// hooks\r\nimport useTabs from '../../hooks/useTabs';\r\n\r\nimport useTable from '../../hooks/useTable';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport Iconify from '../../components/Iconify';\r\nimport Scrollbar from '../../components/Scrollbar';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport { TableNoData, TableHeadCustom } from '../../components/table';\r\n// sections\r\nimport { UserTableToolbar } from '../../sections/@dashboard/user/list';\r\nimport { useDispatch, useSelector } from 'src/redux/store';\r\nimport { deleteFarmer, emptyFarmerDetails, getFarmerList } from 'src/redux/slices/farmers';\r\nimport FarmerTableRow from 'src/sections/@dashboard/user/list/FarmerTableRow';\r\nimport { emptyStatesDetails } from 'src/redux/slices/user';\r\nimport { useSnackbar } from 'notistack';\r\nimport { farmerTableHeader } from 'src/mockUp/Farmer';\r\nimport ConfirmationModal from 'src/components/modal/Confirmation';\r\nimport { DeleteConfirmationContent } from '../sevak/DeleteConfirmationContent';\r\n\r\nexport default function FarmersList() {\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    selected,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n    setPage,\r\n  } = useTable();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const [state, setState] = useState({\r\n    name: '',\r\n    village: '',\r\n    openModal: false,\r\n    id: '',\r\n    farmerName: '',\r\n  });\r\n\r\n  const { currentTab: filterStatus } = useTabs('all');\r\n\r\n  useEffect(() => {\r\n    getFarmerList();\r\n  }, []);\r\n\r\n  const { farmerListData } = useSelector((state) => state.farmer);\r\n\r\n  const onSearch = () => {\r\n    setPage(0);\r\n    getFarmerList(state?.name, state?.village);\r\n  };\r\n\r\n  const handleEmptySerachBox = (name: string) => {\r\n    if (state?.name?.length === 1 && name === '') {\r\n      getFarmerList();\r\n    }\r\n  };\r\n\r\n  const handleFilterName = (filterName: string) => {\r\n    setState((prev) => ({ ...prev, name: filterName }));\r\n    handleEmptySerachBox(filterName);\r\n  };\r\n\r\n  const handleFilterRole = (filterVillage: string) => {\r\n    setState((prev) => ({ ...prev, village: filterVillage }));\r\n  };\r\n\r\n  const isNotFound =\r\n    (!farmerListData?.length && !!state?.name) ||\r\n    (!farmerListData?.length && !!state?.village) ||\r\n    (!farmerListData?.length && !!filterStatus);\r\n\r\n  const handleAddUser = () => {\r\n    dispatch(emptyFarmerDetails(null));\r\n    dispatch(emptyStatesDetails(null));\r\n    navigate(PATH_DASHBOARD.farmers.new);\r\n  };\r\n\r\n  const onhandleEditDetails = (id: string) => {\r\n    dispatch(emptyFarmerDetails(null));\r\n    dispatch(emptyStatesDetails(null));\r\n    navigate(PATH_DASHBOARD.farmers.edit(id));\r\n  };\r\n\r\n  const handleShowDetails = (id: string) => {\r\n    navigate(PATH_DASHBOARD.farmers.details(id));\r\n  };\r\n\r\n  const onhandleDeleteRow = (id: string, name: string) => {\r\n    setState((prev) => ({ ...prev, openModal: true, id: id, farmerName: name }));\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setState((prev) => ({ ...prev, openModal: false, id: '', farmerName: '' }));\r\n  };\r\n\r\n  const handleDeleteFarmer = () => {\r\n    dispatch(deleteFarmer(state?.id))\r\n      .then((res) => {\r\n        if (res?.data?.statusCode === 200) {\r\n          enqueueSnackbar(res?.data?.message, {\r\n            variant: 'success',\r\n          });\r\n          getFarmerList();\r\n          setState((prev) => ({ ...prev, openModal: false, id: '', farmerName: '' }));\r\n        } else {\r\n          getFarmerList();\r\n          setState((prev) => ({ ...prev, openModal: false, id: '', farmerName: '' }));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log('error');\r\n      });\r\n  };\r\n  \r\n  return (\r\n    <Page title=\"Farmer List\">\r\n      <Container maxWidth={'xl'}>\r\n        <HeaderBreadcrumbs\r\n          heading=\"Farmer List\"\r\n          links={[{ href: PATH_DASHBOARD.farmers.list }]}\r\n          action={\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<Iconify icon={'eva:plus-fill'} />}\r\n              onClick={handleAddUser}\r\n            >\r\n              Add Farmer\r\n            </Button>\r\n          }\r\n        />\r\n\r\n        <Card>\r\n          <UserTableToolbar\r\n            filterName={state?.name}\r\n            filterVillage={state?.village}\r\n            onFilterName={handleFilterName}\r\n            onFilterVillage={handleFilterRole}\r\n            onSearch={onSearch}\r\n            placeholderText={'Search by farmer name'}\r\n            placeholderTextSecond={'Search by village name'}\r\n          />\r\n\r\n          <Scrollbar>\r\n            <TableContainer sx={{ minWidth: 800, position: 'relative' }}>\r\n              <Table size={'medium'}>\r\n                <TableHeadCustom\r\n                  order={order}\r\n                  orderBy={orderBy}\r\n                  headLabel={farmerTableHeader}\r\n                  rowCount={farmerListData?.length}\r\n                  numSelected={selected.length}\r\n                />\r\n\r\n                <TableBody>\r\n                  {farmerListData?.length\r\n                    ? farmerListData\r\n                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                        .map((row) => (\r\n                          <FarmerTableRow\r\n                            key={row.id}\r\n                            row={row}\r\n                            onhandleEditDetails={onhandleEditDetails}\r\n                            onhandleDeleteRow={onhandleDeleteRow}\r\n                            handleShowDetails={handleShowDetails}\r\n                          />\r\n                        ))\r\n                    : null}\r\n\r\n                  <TableNoData isNotFound={isNotFound} />\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Scrollbar>\r\n\r\n          <Box sx={{ position: 'relative' }}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25]}\r\n              component=\"div\"\r\n              count={farmerListData?.length ? farmerListData.length : 0}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={onChangePage}\r\n              onRowsPerPageChange={onChangeRowsPerPage}\r\n            />\r\n          </Box>\r\n        </Card>\r\n      </Container>\r\n      <ConfirmationModal\r\n        openModal={state.openModal}\r\n        // isLoading={isLoading}\r\n        handleClose={handleClose}\r\n        title={'Delete Confirmation!'}\r\n        handleSubmit={handleDeleteFarmer}\r\n      >\r\n        <DeleteConfirmationContent userName={state?.farmerName} />\r\n      </ConfirmationModal>\r\n    </Page>\r\n  );\r\n}\r\n"],"names":["farmerTableHeader","id","label","align","farmerLogsHeader","FarmerTableRow","row","onhandleEditDetails","onhandleDeleteRow","handleShowDetails","useState","openMenu","setOpenMenuActions","handleCloseMenu","name","land","village","language","totalPits","villageId","console","log","TableRow","hover","TableCell","sx","display","alignItems","cursor","onClick","Typography","variant","noWrap","textTransform","languageList","item","open","onOpen","event","currentTarget","onClose","actions","MenuItem","Iconify","icon","color","FarmersList","useTable","page","dense","order","orderBy","rowsPerPage","selected","onChangePage","onChangeRowsPerPage","setPage","navigate","useNavigate","dispatch","useDispatch","enqueueSnackbar","useSnackbar","openModal","farmerName","state","setState","filterStatus","useTabs","currentTab","useEffect","getFarmerList","useSelector","farmer","farmerListData","isNotFound","length","emptyFarmerDetails","emptyStatesDetails","PATH_DASHBOARD","prev","Page","title","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","action","Button","startIcon","Card","filterName","filterVillage","onFilterName","handleEmptySerachBox","onFilterVillage","onSearch","placeholderText","placeholderTextSecond","Scrollbar","TableContainer","minWidth","position","Table","size","headLabel","rowCount","numSelected","TableBody","slice","map","Box","TablePagination","rowsPerPageOptions","component","count","onPageChange","onRowsPerPageChange","Confirmation","handleClose","handleSubmit","deleteFarmer","then","res","data","statusCode","message","catch","error","DeleteConfirmationContent","userName"],"sourceRoot":""}