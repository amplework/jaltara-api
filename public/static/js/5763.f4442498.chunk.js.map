{"version":3,"file":"static/js/5763.f4442498.chunk.js","mappings":"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","sources":["sections/@dashboard/user/list/PitTableRow.tsx","pages/pits/PitList.tsx","utils/formateDate.ts"],"sourcesContent":["import { useState } from 'react';\r\n// @mui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Avatar, Checkbox, TableRow, TableCell, Typography, MenuItem, Box } from '@mui/material';\r\n// @types\r\nimport { UserItem } from '../../../../@types/user';\r\n// components\r\nimport Label from '../../../../components/Label';\r\nimport Iconify from '../../../../components/Iconify';\r\nimport { TableMoreMenu } from '../../../../components/table';\r\nimport { PitItem } from 'src/@types/pits';\r\nimport { formatedDate } from 'src/utils/formateDate';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ntype Props = {\r\n  row: PitItem | null;\r\n  handleShowDetails?: (id: any) => void;\r\n  onhandleDeleteRow?: (id: any) => void;\r\n};\r\n\r\nexport default function PitTableRow({ row, handleShowDetails, onhandleDeleteRow }: Props) {\r\n  const theme = useTheme();\r\n  const [openMenu, setOpenMenuActions] = useState<HTMLElement | null>(null);\r\n  const handleOpenMenu = (event: React.MouseEvent<HTMLElement>) => {\r\n    setOpenMenuActions(event.currentTarget);\r\n  };\r\n  const handleCloseMenu = () => {\r\n    setOpenMenuActions(null);\r\n  };\r\n\r\n  const { farmer, village, level, stages, id } = row || {};\r\n\r\n  return (\r\n    <TableRow hover sx={{ cursor: 'default' }}>\r\n      <TableCell\r\n        sx={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}\r\n        onClick={() => handleShowDetails && handleShowDetails(id)}\r\n      >\r\n        {/* <Avatar alt={} src={''} sx={{ mr: 2 }} /> */}\r\n        <Typography variant=\"subtitle2\" noWrap sx={{ textTransform: 'capitalize', }}>\r\n          {farmer?.name}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap sx={{ textTransform: 'capitalize' }}>\r\n          {village?.name}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap>\r\n          {level}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap sx={{ textTransform: 'capitalize' }}>\r\n          {stages?.[0]?.stageName}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Typography variant=\"subtitle2\" noWrap sx={{ textTransform: 'capitalize' }}>\r\n          {stages?.[0]?.updatedbySevek?.name ? stages?.[0]?.updatedbySevek?.name : '--'}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell onClick={() => handleShowDetails && handleShowDetails(id)}>\r\n        <Typography variant=\"subtitle2\" noWrap sx={{ textTransform: 'capitalize' }}>\r\n          {formatedDate(stages?.[0]?.created)}\r\n        </Typography>\r\n      </TableCell>\r\n\r\n      <TableCell align=\"left\">\r\n        <TableMoreMenu\r\n          open={openMenu}\r\n          onOpen={handleOpenMenu}\r\n          onClose={handleCloseMenu}\r\n          actions={\r\n            <>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  onhandleDeleteRow && onhandleDeleteRow(id);\r\n                  handleCloseMenu();\r\n                }}\r\n                sx={{ color: 'error.main' }}\r\n              >\r\n                <Iconify icon={'eva:trash-2-outline'} />\r\n                Delete\r\n              </MenuItem>\r\n              {/* <MenuItem\r\n                onClick={() => {\r\n                  onhandleEditDetails && onhandleEditDetails(id);\r\n                  handleCloseMenu();\r\n                }}\r\n              >\r\n                <Iconify icon={'eva:edit-fill'} />\r\n                Edit\r\n              </MenuItem> */}\r\n            </>\r\n          }\r\n        />\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n// @mui\r\nimport {\r\n  Box,\r\n  Card,\r\n  Table,\r\n  TableBody,\r\n  Container,\r\n  TableContainer,\r\n  TablePagination,\r\n} from '@mui/material';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// hooks\r\nimport useTabs from '../../hooks/useTabs';\r\nimport useTable from '../../hooks/useTable';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport Scrollbar from '../../components/Scrollbar';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport { TableNoData, TableHeadCustom } from '../../components/table';\r\n// sections\r\nimport { UserTableToolbar } from '../../sections/@dashboard/user/list';\r\nimport { useDispatch, useSelector } from 'src/redux/store';\r\nimport { deletePits, getPitsList, startLoading } from 'src/redux/slices/pits';\r\nimport { PitItem } from 'src/@types/pits';\r\nimport PitTableRow from 'src/sections/@dashboard/user/list/PitTableRow';\r\nimport { useSnackbar } from 'notistack';\r\n\r\nconst TABLE_HEAD = [\r\n  { id: 'name', label: 'Farmer name', align: 'left' },\r\n  { id: 'village', label: 'Village name', align: 'left' },\r\n  { id: 'number of pits', label: 'Pit level', align: 'left' },\r\n  { id: 'stage name', label: 'Stage name', align: 'left' },\r\n  { id: 'update by sevak', label: 'Update by sevak', align: 'left' },\r\n  { id: 'last update', label: 'Last update', align: 'left' },\r\n  { id: 'action', label: 'Action', align: 'left' },\r\n];\r\n\r\nexport default function PitList() {\r\n  const {\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    selected,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n    setPage,\r\n  } = useTable();\r\n\r\n  const stagesName = [\r\n    {\r\n      id: '1',\r\n      name: 'marking',\r\n      value: 'marking',\r\n      label: 'Marking',\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'digging',\r\n      value: 'digging',\r\n      label: 'Digging',\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'filling',\r\n      value: 'filling',\r\n      label: 'Filling',\r\n    },\r\n    {\r\n      id: '4',\r\n      name: 'maintenance',\r\n      value: 'maintenance',\r\n      label: 'Maintenance',\r\n    },\r\n  ];\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [filterName, setFilterName] = useState('');\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [filterVillage, setFilterVillage] = useState('');\r\n\r\n  const [state, setState] = useState({\r\n    selectStages: '',\r\n  });\r\n\r\n  const { currentTab: filterStatus } = useTabs('all');\r\n\r\n  useEffect(() => {\r\n    getPitsList();\r\n  }, []);\r\n\r\n  const { pitListData } = useSelector((state) => state.pits);\r\n\r\n  const onSearch = () => {\r\n    setPage(0)\r\n    const statgesSearch = state.selectStages;\r\n    getPitsList(filterName, filterVillage, statgesSearch);\r\n  };\r\n\r\n  const handleFilterName = (filterName: string) => {\r\n    setFilterName(filterName);\r\n  };\r\n\r\n  const handleFilterRole = (filterVillage: string) => {\r\n    setFilterVillage(filterVillage);\r\n  };\r\n\r\n  const onChange = (value: any) => {\r\n    setState((prev) => ({ ...prev, selectStages: value }));\r\n  };\r\n\r\n  const handleShowDetails = (id: string) => {\r\n    navigate(PATH_DASHBOARD.pits.details(id));\r\n  };\r\n\r\n  const onhandleDeleteRow = (id: string) => {\r\n    dispatch(deletePits(id))\r\n      .then((res) => {\r\n        if (res?.data?.statusCode === 200) {\r\n          enqueueSnackbar(res?.data?.message, {\r\n            variant: 'success',\r\n          });\r\n          getPitsList();\r\n        } else {\r\n          getPitsList();\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('error');\r\n      });\r\n  };\r\n\r\n  const isNotFound =\r\n    (!pitListData?.length && !!filterName) ||\r\n    (!pitListData?.length && !!filterVillage) ||\r\n    (!pitListData?.length && !!filterName) ||\r\n    (!pitListData?.length && !!filterStatus);\r\n\r\n  return (\r\n    <Page title=\"Pits List\">\r\n      <Container maxWidth={'xl'}>\r\n        <HeaderBreadcrumbs heading=\"Pits List\" links={[{ href: PATH_DASHBOARD.pits.list }]} />\r\n\r\n        <Card>\r\n          <UserTableToolbar\r\n            filterName={filterName}\r\n            filterVillage={filterVillage}\r\n            onFilterName={handleFilterName}\r\n            onFilterVillage={handleFilterRole}\r\n            onSearch={onSearch}\r\n            placeholderText={'Search by farmer name'}\r\n            placeholderTextSecond={'Search by village name'}\r\n            pits={true}\r\n            stagesName={stagesName}\r\n            onChange={onChange}\r\n            state={state}\r\n          />\r\n\r\n          <Scrollbar>\r\n            <TableContainer sx={{ minWidth: 800, position: 'relative' }}>\r\n              <Table size={'medium'}>\r\n                <TableHeadCustom\r\n                  order={order}\r\n                  orderBy={orderBy}\r\n                  headLabel={TABLE_HEAD}\r\n                  rowCount={pitListData?.length}\r\n                  numSelected={selected.length}\r\n                />\r\n\r\n                <TableBody>\r\n                  {pitListData?.length\r\n                    ? pitListData\r\n                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                        .map((row: PitItem) => (\r\n                          <PitTableRow\r\n                            key={row.id}\r\n                            row={row}\r\n                            handleShowDetails={handleShowDetails}\r\n                            onhandleDeleteRow={onhandleDeleteRow}\r\n                          />\r\n                        ))\r\n                    : null}\r\n\r\n                  <TableNoData isNotFound={isNotFound} />\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Scrollbar>\r\n\r\n          <Box sx={{ position: 'relative' }}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25]}\r\n              component=\"div\"\r\n              count={pitListData?.length ? pitListData.length : 0}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={onChangePage}\r\n              onRowsPerPageChange={onChangeRowsPerPage}\r\n            />\r\n          </Box>\r\n        </Card>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n","import moment from 'moment';\r\nexport function formatedDate(date?: Date | string | number) {\r\n  return moment(date).format('MM/DD/YYYY');\r\n}\r\n\r\nexport function formatedDateTime(date?: Date | string | number) {\r\n  return moment(date).format('MM/DD/YYYY hh:mm a');\r\n}\r\n"],"names":["PitTableRow","row","handleShowDetails","onhandleDeleteRow","useTheme","useState","openMenu","setOpenMenuActions","handleCloseMenu","farmer","village","level","stages","id","TableRow","hover","sx","cursor","TableCell","display","alignItems","onClick","Typography","variant","noWrap","textTransform","name","stageName","updatedbySevek","formatedDate","created","align","open","onOpen","event","currentTarget","onClose","actions","MenuItem","color","Iconify","icon","TABLE_HEAD","label","PitList","useTable","page","order","orderBy","rowsPerPage","selected","onChangePage","onChangeRowsPerPage","setPage","navigate","useNavigate","filterName","setFilterName","enqueueSnackbar","useSnackbar","dispatch","useDispatch","filterVillage","setFilterVillage","selectStages","state","setState","filterStatus","useTabs","currentTab","useEffect","getPitsList","useSelector","pits","pitListData","PATH_DASHBOARD","deletePits","then","res","data","statusCode","message","catch","console","log","isNotFound","length","Page","title","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","Card","onFilterName","onFilterVillage","onSearch","statgesSearch","placeholderText","placeholderTextSecond","stagesName","value","onChange","prev","Scrollbar","TableContainer","minWidth","position","Table","size","headLabel","rowCount","numSelected","TableBody","slice","map","Box","TablePagination","rowsPerPageOptions","component","count","onPageChange","onRowsPerPageChange","date","moment","format","formatedDateTime"],"sourceRoot":""}