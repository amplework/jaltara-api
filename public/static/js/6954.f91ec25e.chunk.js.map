{"version":3,"file":"static/js/6954.f91ec25e.chunk.js","mappings":"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","sources":["pages/sevak/SevakList.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n// @mui\r\nimport {\r\n  Box,\r\n  Card,\r\n  Table,\r\n  Button,\r\n  TableBody,\r\n  Container,\r\n  TableContainer,\r\n  TablePagination,\r\n} from '@mui/material';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// hooks\r\nimport useTabs from '../../hooks/useTabs';\r\nimport useTable from '../../hooks/useTable';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport Iconify from '../../components/Iconify';\r\nimport Scrollbar from '../../components/Scrollbar';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport { TableNoData, TableHeadCustom } from '../../components/table';\r\n// sections\r\nimport { UserTableToolbar } from '../../sections/@dashboard/user/list';\r\nimport {\r\n  deleteSevak,\r\n  emptyStatesDetails,\r\n  emptyUserDetails,\r\n  getUsersList,\r\n} from 'src/redux/slices/user';\r\nimport { dispatch, useSelector } from 'src/redux/store';\r\nimport { useSnackbar } from 'notistack';\r\nimport { sevekTableHeader } from 'src/mockUp/Sevak';\r\nimport SevakTableRow from 'src/sections/@dashboard/user/list/SevakTableRow';\r\nimport ConfirmationModal from 'src/components/modal/Confirmation';\r\nimport { DeleteConfirmationContent } from './DeleteConfirmationContent';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function UserList() {\r\n  const {\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    selected,\r\n    onSelectRow,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n    setPage,\r\n  } = useTable();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const [state, setState] = useState({\r\n    name: '',\r\n    village: '',\r\n    openModal: false,\r\n    id: '',\r\n    sevakName: '',\r\n  });\r\n\r\n  const { currentTab: filterStatus } = useTabs('all');\r\n\r\n  useEffect(() => {\r\n    getUsersList();\r\n  }, []);\r\n\r\n  const { userListData } = useSelector((state) => state.user);\r\n\r\n  const onSearch = () => {\r\n    setPage(0);\r\n    getUsersList(state?.name, state?.village);\r\n  };\r\n\r\n  const handleEmptySerachBox = (name: string) => {\r\n    if (state?.name?.length === 1 && name === '') {\r\n      getUsersList();\r\n    }\r\n  };\r\n  const handleFilterName = (Name: string) => {\r\n    setState((prev) => ({ ...prev, name: Name }));\r\n    handleEmptySerachBox(Name);\r\n  };\r\n\r\n  const handleFilterRole = (village: string) => {\r\n    setState((prev) => ({ ...prev, village: village }));\r\n  };\r\n\r\n  const isNotFound =\r\n    (!userListData?.length && !!state?.name) ||\r\n    (!userListData?.length && !!state?.village) ||\r\n    (!userListData?.length && !!filterStatus);\r\n\r\n  const handleAddUser = () => {\r\n    dispatch(emptyUserDetails(null));\r\n    dispatch(emptyStatesDetails(null));\r\n    navigate(PATH_DASHBOARD.sevak.create);\r\n  };\r\n\r\n  const onhandleEditDetails = (id: string) => {\r\n    dispatch(emptyUserDetails(null));\r\n    dispatch(emptyStatesDetails(null));\r\n    navigate(PATH_DASHBOARD.sevak.edit(id));\r\n  };\r\n\r\n  const onhandleDeleteRow = (id: string, name: string) => {\r\n    setState((prev) => ({ ...prev, openModal: true, id: id, sevakName: name }));\r\n  };\r\n\r\n  const handleShowDetails = (id: string) => {\r\n    navigate(PATH_DASHBOARD.sevak.details(id));\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setState((prev) => ({ ...prev, openModal: false, id: '', sevakName: '' }));\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    dispatch(deleteSevak(state.id))\r\n      .then((res) => {\r\n        if (res?.data?.statusCode === 200) {\r\n          enqueueSnackbar(res?.data?.message, {\r\n            variant: 'success',\r\n          });\r\n          getUsersList();\r\n          setState((prev) => ({ ...prev, openModal: false, id: '', sevakName: '' }));\r\n        } else {\r\n          getUsersList();\r\n          setState((prev) => ({ ...prev, openModal: false, id: '', sevakName: '' }));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log('error');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Page title=\"Sevaks List\">\r\n      <Container maxWidth={'xl'}>\r\n        <HeaderBreadcrumbs\r\n          heading=\"Sevaks List\"\r\n          links={[{ href: PATH_DASHBOARD.sevak.root }]}\r\n          action={\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<Iconify icon={'eva:plus-fill'} />}\r\n              onClick={handleAddUser}\r\n            >\r\n              Add Sevak\r\n            </Button>\r\n          }\r\n        />\r\n\r\n        <Card>\r\n          <UserTableToolbar\r\n            filterName={state?.name}\r\n            filterVillage={state?.village}\r\n            onFilterName={handleFilterName}\r\n            onFilterVillage={handleFilterRole}\r\n            onSearch={onSearch}\r\n            placeholderText={'Search by sevak name'}\r\n            placeholderTextSecond={'Search by village name'}\r\n          />\r\n\r\n          <Scrollbar>\r\n            <TableContainer sx={{ minWidth: 800, position: 'relative' }}>\r\n              <Table>\r\n                <TableHeadCustom\r\n                  order={order}\r\n                  orderBy={orderBy}\r\n                  headLabel={sevekTableHeader}\r\n                  rowCount={userListData?.length}\r\n                  numSelected={selected.length}\r\n                />\r\n\r\n                <TableBody>\r\n                  {userListData?.length\r\n                    ? userListData\r\n                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                        .map((row) => (\r\n                          <SevakTableRow\r\n                            key={row.id}\r\n                            row={row}\r\n                            selected={selected.includes(row.id)}\r\n                            onSelectRow={() => onSelectRow(row.id)}\r\n                            onhandleEditDetails={onhandleEditDetails}\r\n                            onhandleDeleteRow={onhandleDeleteRow}\r\n                            handleShowDetails={handleShowDetails}\r\n                          />\r\n                        ))\r\n                    : null}\r\n                  <TableNoData isNotFound={isNotFound} />\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Scrollbar>\r\n\r\n          <Box sx={{ position: 'relative' }}>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25]}\r\n              component=\"div\"\r\n              count={userListData?.length ? userListData.length : 0}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onPageChange={onChangePage}\r\n              onRowsPerPageChange={onChangeRowsPerPage}\r\n            />\r\n          </Box>\r\n        </Card>\r\n      </Container>\r\n      <ConfirmationModal\r\n        openModal={state.openModal}\r\n        // isLoading={isLoading}\r\n        handleClose={handleClose}\r\n        title={'Delete Confirmation!'}\r\n        handleSubmit={handleSubmit}\r\n      >\r\n        <DeleteConfirmationContent userName={state?.sevakName}/>\r\n      </ConfirmationModal>\r\n    </Page>\r\n  );\r\n}\r\n"],"names":["UserList","useTable","page","order","orderBy","rowsPerPage","selected","onSelectRow","onChangePage","onChangeRowsPerPage","setPage","navigate","useNavigate","enqueueSnackbar","useSnackbar","useState","name","village","openModal","id","sevakName","state","setState","filterStatus","useTabs","currentTab","useEffect","getUsersList","useSelector","user","userListData","isNotFound","length","onhandleEditDetails","dispatch","emptyUserDetails","emptyStatesDetails","PATH_DASHBOARD","onhandleDeleteRow","prev","handleShowDetails","title","maxWidth","heading","links","href","action","variant","startIcon","icon","onClick","filterName","filterVillage","onFilterName","Name","handleEmptySerachBox","onFilterVillage","onSearch","placeholderText","placeholderTextSecond","sx","minWidth","position","headLabel","sevekTableHeader","rowCount","numSelected","slice","map","row","includes","rowsPerPageOptions","component","count","onPageChange","onRowsPerPageChange","handleClose","handleSubmit","deleteSevak","then","res","data","statusCode","message","catch","error","console","log","userName"],"sourceRoot":""}