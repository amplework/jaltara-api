{"version":3,"file":"static/js/7174.259636f3.chunk.js","mappings":"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","sources":["sections/auth/new-password/NewPasswordForm.tsx","pages/auth/NewPassword.tsx"],"sourcesContent":["import * as Yup from 'yup';\r\nimport { useSnackbar } from 'notistack';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\n// form\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n// @mui\r\nimport { Stack, IconButton, OutlinedInput, InputAdornment, FormHelperText } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n// components\r\nimport Iconify from '../../../components/Iconify';\r\nimport { FormProvider, RHFTextField } from '../../../components/hook-form';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\ntype FormValuesProps = {\r\n  code1: string;\r\n  code2: string;\r\n  code3: string;\r\n  code4: string;\r\n  code5: string;\r\n  code6: string;\r\n  email: string;\r\n  password: string;\r\n  confirmPassword: string;\r\n};\r\n\r\ntype ValueNames = 'code1' | 'code2' | 'code3' | 'code4' | 'code5' | 'code6';\r\n\r\nexport default function NewPasswordForm() {\r\n  const navigate = useNavigate();\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const emailRecovery = sessionStorage.getItem('email-recovery');\r\n\r\n  const VerifyCodeSchema = Yup.object().shape({\r\n    code1: Yup.string().required('Code is required'),\r\n    code2: Yup.string().required('Code is required'),\r\n    code3: Yup.string().required('Code is required'),\r\n    code4: Yup.string().required('Code is required'),\r\n    code5: Yup.string().required('Code is required'),\r\n    code6: Yup.string().required('Code is required'),\r\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\r\n    password: Yup.string()\r\n      .min(6, 'Password must be at least 6 characters')\r\n      .required('Password is required'),\r\n    confirmPassword: Yup.string()\r\n      .required('Confirm password is required')\r\n      .oneOf([Yup.ref('password'), null], 'Passwords must match'),\r\n  });\r\n\r\n  const defaultValues = {\r\n    code1: '',\r\n    code2: '',\r\n    code3: '',\r\n    code4: '',\r\n    code5: '',\r\n    code6: '',\r\n    email: emailRecovery || '',\r\n    password: '',\r\n    confirmPassword: '',\r\n  };\r\n\r\n  const methods = useForm({\r\n    mode: 'all',\r\n    resolver: yupResolver(VerifyCodeSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    control,\r\n    setValue,\r\n    handleSubmit,\r\n    formState: { isSubmitting, errors },\r\n  } = methods;\r\n\r\n  useEffect(() => {\r\n    const target = document.querySelector('input.field-code');\r\n\r\n    target?.addEventListener('paste', handlePaste);\r\n\r\n    return () => {\r\n      target?.removeEventListener('paste', handlePaste);\r\n    };\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const handlePaste = (event: any) => {\r\n    let data = event.clipboardData.getData('text');\r\n\r\n    data = data.split('');\r\n\r\n    [].forEach.call(document.querySelectorAll('.field-code'), (node: any, index) => {\r\n      node.value = data[index];\r\n\r\n      const fieldIndex = `code${index + 1}`;\r\n\r\n      setValue(fieldIndex as ValueNames, data[index]);\r\n    });\r\n\r\n    event.preventDefault();\r\n  };\r\n\r\n  const handleChangeWithNextField = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n    handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void\r\n  ) => {\r\n    const { maxLength, value, name } = event.target;\r\n\r\n    const fieldIndex = name.replace('code', '');\r\n\r\n    const fieldIntIndex = Number(fieldIndex);\r\n\r\n    if (value.length >= maxLength) {\r\n      if (fieldIntIndex < 6) {\r\n        const nextfield = document.querySelector(`input[name=code${fieldIntIndex + 1}]`);\r\n\r\n        if (nextfield !== null) {\r\n          (nextfield as HTMLElement).focus();\r\n        }\r\n      }\r\n    }\r\n\r\n    handleChange(event);\r\n  };\r\n\r\n  const onSubmit = async (data: FormValuesProps) => {\r\n    try {\r\n      await new Promise((resolve) => setTimeout(resolve, 500));\r\n      console.log('data:', {\r\n        email: data.email,\r\n        code: `${data.code1}${data.code2}${data.code3}${data.code4}${data.code5}${data.code6}`,\r\n        password: data.password,\r\n      });\r\n\r\n      sessionStorage.removeItem('email-recovery');\r\n\r\n      enqueueSnackbar('Change password success!');\r\n\r\n      navigate(PATH_DASHBOARD.root, { replace: true });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack spacing={3}>\r\n        <RHFTextField name=\"email\" label=\"Email\" disabled={!!emailRecovery} />\r\n\r\n        <Stack direction=\"row\" spacing={2} justifyContent=\"center\">\r\n          {['code1', 'code2', 'code3', 'code4', 'code5', 'code6'].map((name, index) => (\r\n            <Controller\r\n              key={name}\r\n              name={`code${index + 1}` as ValueNames}\r\n              control={control}\r\n              render={({ field, fieldState: { error } }) => (\r\n                <OutlinedInput\r\n                  {...field}\r\n                  error={!!error}\r\n                  autoFocus={index === 0}\r\n                  placeholder=\"-\"\r\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\r\n                    handleChangeWithNextField(event, field.onChange)\r\n                  }\r\n                  inputProps={{\r\n                    className: 'field-code',\r\n                    maxLength: 1,\r\n                    sx: {\r\n                      p: 0,\r\n                      textAlign: 'center',\r\n                      width: { xs: 36, sm: 56 },\r\n                      height: { xs: 36, sm: 56 },\r\n                    },\r\n                  }}\r\n                />\r\n              )}\r\n            />\r\n          ))}\r\n        </Stack>\r\n\r\n        {(!!errors.code1 ||\r\n          !!errors.code2 ||\r\n          !!errors.code3 ||\r\n          !!errors.code4 ||\r\n          !!errors.code5 ||\r\n          !!errors.code6) && (\r\n          <FormHelperText error sx={{ px: 2 }}>\r\n            Code is required\r\n          </FormHelperText>\r\n        )}\r\n\r\n        <RHFTextField\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          type={showPassword ? 'text' : 'password'}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton onClick={() => setShowPassword(!showPassword)} edge=\"end\">\r\n                  <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n\r\n        <RHFTextField\r\n          name=\"confirmPassword\"\r\n          label=\"Confirm New Password\"\r\n          type={showPassword ? 'text' : 'password'}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton onClick={() => setShowPassword(!showPassword)} edge=\"end\">\r\n                  <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n\r\n        <LoadingButton\r\n          fullWidth\r\n          size=\"large\"\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          loading={isSubmitting}\r\n          sx={{ mt: 3 }}\r\n        >\r\n          Change password\r\n        </LoadingButton>\r\n      </Stack>\r\n    </FormProvider>\r\n  );\r\n}\r\n","// @mui\r\nimport { styled } from '@mui/material/styles';\r\nimport { Box, Link, Container, Typography } from '@mui/material';\r\n// layouts\r\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\r\n// components\r\nimport Page from '../../components/Page';\r\n// sections\r\nimport { NewPasswordForm } from '../../sections/auth/new-password';\r\n// assets\r\nimport { SentIcon } from '../../assets';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst ContentStyle = styled('div')(({ theme }) => ({\r\n  maxWidth: 480,\r\n  margin: 'auto',\r\n  minHeight: '100vh',\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n  flexDirection: 'column',\r\n  padding: theme.spacing(12, 0),\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function NewPassword() {\r\n  return (\r\n    <Page title=\"New Password\">\r\n      <LogoOnlyLayout />\r\n\r\n      <Container>\r\n        <ContentStyle sx={{ textAlign: 'center' }}>\r\n          <SentIcon sx={{ mb: 5, mx: 'auto', height: 120 }} />\r\n\r\n          <Typography variant=\"h3\" gutterBottom>\r\n            Request sent successfully!\r\n          </Typography>\r\n\r\n          <Typography sx={{ color: 'text.secondary' }}>\r\n            We've sent a 6-digit confirmation email to your email.\r\n            <br />\r\n            Please enter the code in below box to verify your email.\r\n          </Typography>\r\n\r\n          <Box sx={{ mt: 5, mb: 3 }}>\r\n            <NewPasswordForm />\r\n          </Box>\r\n\r\n          <Typography variant=\"body2\">\r\n            Don’t have a code? &nbsp;\r\n            <Link variant=\"subtitle2\" onClick={() => {}}>\r\n              Resend code\r\n            </Link>\r\n          </Typography>\r\n        </ContentStyle>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"],"names":["NewPasswordForm","navigate","useNavigate","enqueueSnackbar","useSnackbar","useState","showPassword","setShowPassword","emailRecovery","sessionStorage","getItem","VerifyCodeSchema","Yup","shape","code1","required","code2","code3","code4","code5","code6","email","password","min","confirmPassword","oneOf","defaultValues","methods","useForm","mode","resolver","yupResolver","control","setValue","handleSubmit","formState","isSubmitting","errors","useEffect","target","document","querySelector","addEventListener","handlePaste","removeEventListener","event","data","clipboardData","getData","split","forEach","call","querySelectorAll","node","index","value","fieldIndex","preventDefault","onSubmit","Promise","resolve","setTimeout","console","log","code","removeItem","PATH_DASHBOARD","replace","error","Stack","spacing","name","label","disabled","direction","justifyContent","map","render","field","fieldState","OutlinedInput","autoFocus","placeholder","onChange","handleChange","maxLength","fieldIntIndex","Number","length","nextfield","focus","handleChangeWithNextField","inputProps","className","sx","p","textAlign","width","xs","sm","height","FormHelperText","px","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","edge","Iconify","icon","LoadingButton","fullWidth","size","variant","loading","mt","ContentStyle","styled","maxWidth","margin","minHeight","display","flexDirection","padding","theme","NewPassword","Page","title","LogoOnlyLayout","Container","mb","mx","Typography","gutterBottom","color","Box","Link"],"sourceRoot":""}